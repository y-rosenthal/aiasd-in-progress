[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "AI Assisted Software Development",
    "section": "",
    "text": "About This Website\nThis website is for the use of my students at YU.\nThe menu on the left lists the “chapters” in the “book”. When you click on a “chapter” from the left hand menu, you should see another menu appear on the right hand side of the screen. The menu on the right side contains links to sections in that chapter. It’s not perfect, but I’m working on improving the links.\n-Prof. Rosenthal",
    "crumbs": [
      "About This Website"
    ]
  },
  {
    "objectID": "000020-introToAi-v001.html",
    "href": "000020-introToAi-v001.html",
    "title": "1  1.  Overview of AI today",
    "section": "",
    "text": "1.1 What modern AI systems can do",
    "crumbs": [
      "Intro",
      "<span class='chapter-number'>1</span>  <span class='chapter-title'><yrChapterNumber>1. </yrChapterNumber> Overview of AI today</span>"
    ]
  },
  {
    "objectID": "000020-introToAi-v001.html#survey-of-current-ai-capabilities-and-shortcomings",
    "href": "000020-introToAi-v001.html#survey-of-current-ai-capabilities-and-shortcomings",
    "title": "1  1.  Overview of AI today",
    "section": "1.2 Survey of Current AI Capabilities and Shortcomings",
    "text": "1.2 Survey of Current AI Capabilities and Shortcomings\nArtificial Intelligence, or AI, has featured very prominently in the news in recent years. Modern AI systems have been developed that can do many things that were once considered impossible for computers to do. The list below segments AI features into distinct categories. However, AI is constantly being incorporated into other systems at a rapid pace. Often an AI feature is just one part of a much larger system. Therefore, while the list below is demonstrative of AI abilities, keep in mind that these abilities are constantly being blended and incorporated into systems to the point that they might not be recognized as separate “AI” features. Some of the systems below are free to use, while others charge for their services. Specific offerings are in a constant state of flux with new services constantly appearing and existing services being modified all the time. The following list may very well be outdated by the time you read this. However, knowing that different types of AI systems exist gives you the ability to search for up to date offerings at your leisure.\nAn “AI model” is the underlying technology that powers the logic, reasoning and abilities of an AI. You can think of a “model” as similar to a “computer program”. Different AI “models” have different capabilities and power. Later, we will discuss some of the technical terminology that is associated with an “AI model”.\n\nChat systems - chatgpt is the most well known of these systems. However, there are many such systems available today. These are probably the most well known of all modern AI systems. These systems are able to carry on a running conversation. They can answer questions, give opinions, write novels, write software code, etc. We will study these types of systems in more depth later. Many of these systems have been given added features that allow them to search the web, generate images, view images and understand them, etc.\nExamples: https://chatgpt.com , https://claude.ai , https://grok.com , Google’s https://gemini.google.com , https://perplexity.ai/\nThese types of systems are powered by “Large Language Models” or LLMs. We will discuss more about the technology that is used to create an LLM a little later.\nImage generation - Generate images from text prompts. These systems can generate cartoons, photrealistic pictures, imitate styles of famous artists, etc. Some systems are more capable than others.\nExamples: https://chatgpt.com, https://www.midjourney.com/, etc.\nVideo generation - generate videos from text prompts.\nExamples: Google search for “ai video generator”\nHumanoid Robots - Robots in humanoid form. These robots can currently be used for repetitive tasks such as those that are commone in factories. Large investments are being made in the techonology. Many tecnologists and business professionals predict that humanoid robots will become adept enough in the relatively near future to be used for general tasks such as general household chores, e.g. cooking, vacuuming, etc. as well as more complex tasks following after that.\nExamples:\nBoston Dynamics Atlas https://www.youtube.com/watch?v=-e1_QhJ1EhQ ,\nTesla bot https://www.youtube.com/watch?v=eCNVet_wXGA\nAutonomous Systems - Use computer vision and reinforcement learning for self-driving - Tesla, Waymo. Automate delivery and logistics - drones, warehouse robots\nHealthcare\n\nPredict protein structures and assist in drug discovery - AlphaFold, Insilico\n\nAnalyze medical images and patient data for early detection - AI diagnostics systems\n\nFinance\n\nIdentify abnormal transaction patterns - fraud detection systems\n\nOptimize investment strategies automatically - algorithmic trading platforms\n\nProvide automated customer support - AI chatbots\n\nCreative Arts\n\nGenerate music from text prompts or melodies - Suno, Udio\n\nCreate and edit videos using generative AI - Runway, Pika\n\nEducation\n\nOffer personalized tutoring, feedback, and learning support - Khanmigo, Sora\n\nBusiness Productivity\n\nIntegrate AI into office tools for writing",
    "crumbs": [
      "Intro",
      "<span class='chapter-number'>1</span>  <span class='chapter-title'><yrChapterNumber>1. </yrChapterNumber> Overview of AI today</span>"
    ]
  },
  {
    "objectID": "000020-introToAi-v001.html#a-rough-definition-of-ai",
    "href": "000020-introToAi-v001.html#a-rough-definition-of-ai",
    "title": "1  1.  Overview of AI today",
    "section": "1.3 A rough definition of AI",
    "text": "1.3 A rough definition of AI\nThe definition of AI has changed over the years. For example getting a computer to play chess effectively was once considered a major AI milestone. However, in 1997, IBM’s chess playing system named “Deep Blue” beat the world chess champion, Garry Kasparov. From roughly that point on, chess playing programs ceased to be viewed as AI and simply became viewed as just another computer program.\nArtificial intelligence has been notoriously difficult to define. One rough definition describes it as the science of creating machines that can perform tasks previously thought to require human intelligence. This is obviously a moving target as technology advances.",
    "crumbs": [
      "Intro",
      "<span class='chapter-number'>1</span>  <span class='chapter-title'><yrChapterNumber>1. </yrChapterNumber> Overview of AI today</span>"
    ]
  },
  {
    "objectID": "000020-introToAi-v001.html#modern-ai-post-2005ish",
    "href": "000020-introToAi-v001.html#modern-ai-post-2005ish",
    "title": "1  1.  Overview of AI today",
    "section": "1.4 Modern AI (post 2005’ish)",
    "text": "1.4 Modern AI (post 2005’ish)\nIn the modern era (post 2005’ish) the creation of AI systems differs from classical computer programming in a very significant way. Modern AI systems are “trained” rather than “programmed”. The vast majority, if not all, of modern AI systems have an “Artificial Neural Network” (ANN) “model” at their core. The design of an ANN is loosely patterned after structures found in the human brain. The brain is composed of billions of neurons that are intricately interconnected to each other. Connections between different neurons have different strengths. When a person learns something, processes in the brain act to strengthen or weaken these connections.\nThe software that underlies modern ANNs is relatively simple. The software simulates the neurons and the connections between different neurons that are found in a brain. However, the real “smarts” of a modern AI system comes from the “training” that must be done to get the “strengths” (or weights) of the connections between these artificial neurons to the ideal levels in order for the ANN to accomplish a specific goal. In order to adjust the strengths of the connections between different neurons, the ANN is “shown” numerous examples of what it is being trained for.\nFor example, suppose an ANN is being trained to recognize whether a picture is a cat, a dog or something else. The ANN might be shown a picture and asked if it is a (1) a cat (2) a dog or (3) something else. If the AI responds correctly, nothing is changed in the ANN. However, if the AI responds incorrectly then the “weights”, or connection strengths between the artificial neurons in the ANN, are adjusted so that the ANN is “more likely” to get the right answer the next time for the given example. The exact technique for updating the weights are pretty technical and we won’t go into them now. The important thing to know is that the changing of weights between the neurons in response to incorrect actions by the ANN is in essence what gives the AI an ability to “learn” or be “trained”. (In fact, many advances in AI are directly related to improving the process by which these connections are strengthened or weakened.)\nThis is similar to what happens when humans study a subject and go through many different examples to test themselves. For example if a human is being trained to recognize different grades of diamonds, every example they see of a diamond helps to train their brain to pick up on the subtle differences between different grades. The human in this example slowly learns to pick up on the subtle patterns that distinguish one grade of diamond from another. Every time the human is shown something that they didn’t expect (e.g. they graded a diamond incorrectly and then were shown the correct grade) the connections between the neurons in the human brain are adjusted to help the human pick up on the subtle patterns that differentiate diamonds of different grades. In a similar way, by being shown lots of examples, an ANN is trained to pick up on the subtle patterns that help it to accomplish its task - in this case to pick up on the subtleties that distinguish a picutre of a cat from that of a dog from that of anything else. An ANN could be trained in a similar way to recognize different grades of diamonds. All such an AI would need to be trained in this way is sufficient examples of diamonds that have already been graded correctly.",
    "crumbs": [
      "Intro",
      "<span class='chapter-number'>1</span>  <span class='chapter-title'><yrChapterNumber>1. </yrChapterNumber> Overview of AI today</span>"
    ]
  },
  {
    "objectID": "000020-introToAi-v001.html#deep-neural-networks-dnn-and-deep-learning-dl",
    "href": "000020-introToAi-v001.html#deep-neural-networks-dnn-and-deep-learning-dl",
    "title": "1  1.  Overview of AI today",
    "section": "1.5 “Deep Neural Networks” (DNN) and “Deep Learning” (DL)",
    "text": "1.5 “Deep Neural Networks” (DNN) and “Deep Learning” (DL)\nModern Artificial Neural Networks, such as those that power today’s popular commercially available AI systems, contain many, many, many artificial neurons. These artificial neurons are arranged in many, many layers of neurons. One layer of neurons is connected to the next layer which is connected to the next, etc. For this reason, these networks are often referred to as “Deep Neural Networks” (DNN). The process of training these networks is often referred to as “Deep Learning” (DL).",
    "crumbs": [
      "Intro",
      "<span class='chapter-number'>1</span>  <span class='chapter-title'><yrChapterNumber>1. </yrChapterNumber> Overview of AI today</span>"
    ]
  },
  {
    "objectID": "000020-introToAi-v001.html#narrow-ai",
    "href": "000020-introToAi-v001.html#narrow-ai",
    "title": "1  1.  Overview of AI today",
    "section": "1.6 Narrow AI",
    "text": "1.6 Narrow AI\nAll modern AI models are trained with one or more specific goals in mind. For example an AI system used by the IRS could be trained to identify tax returns that appear to be fraudulent. A chess playing AI could be trained to make optimal chess moves. A video game playing AI could be trained to move in the optimal way and make optimal decisions - e.g. what objects in the game should be attacked and which should not. Engineering all of these types of AI involve some sort of training that adjusts the weights between the neurons in the ANN model of the AI. These types of AIs however are often known as “narrow AI”, ie. they are intelligent at one particular task - e.g. identifying fraudulent tax returns or playing a specific game. However, these types of AIs are not designed to tackle problems outside of the domain that they’ve been specifically trained to do.",
    "crumbs": [
      "Intro",
      "<span class='chapter-number'>1</span>  <span class='chapter-title'><yrChapterNumber>1. </yrChapterNumber> Overview of AI today</span>"
    ]
  },
  {
    "objectID": "000020-introToAi-v001.html#artificial-general-intelligence-agi",
    "href": "000020-introToAi-v001.html#artificial-general-intelligence-agi",
    "title": "1  1.  Overview of AI today",
    "section": "1.7 Artificial General Intelligence (AGI)",
    "text": "1.7 Artificial General Intelligence (AGI)\nAGI (Artificial General Intelligence) refers to a hypothetical form of AI that can understand, learn, and apply knowledge across a wide range of tasks — much like a human. An AGI would be able to reason beyond it was trained on.\nUnlike narrow AI, which excels only at specific tasks (e.g., image recognition, translation, or playing chess), an AGI would:\n\nTransfer learning from one domain to another.\nReason abstractly and solve new problems.\nUnderstand context and common sense.\nExhibit autonomy and adaptability comparable to human intelligence.\n\nAGI doesn’t currently exist — it’s a goal and topic of active research and debate in AI, neuroscience, and philosophy.",
    "crumbs": [
      "Intro",
      "<span class='chapter-number'>1</span>  <span class='chapter-title'><yrChapterNumber>1. </yrChapterNumber> Overview of AI today</span>"
    ]
  },
  {
    "objectID": "000020-introToAi-v001.html#large-language-models-llms-vs-other-types-of-models",
    "href": "000020-introToAi-v001.html#large-language-models-llms-vs-other-types-of-models",
    "title": "1  1.  Overview of AI today",
    "section": "1.8 Large Language Models (LLMs) vs other types of models",
    "text": "1.8 Large Language Models (LLMs) vs other types of models\nChat based models such as ChatGPT have achieved amazing results and often give the appearance of being truly intelligent. They seem to know about everything and seem to have “general knowledge”. However as we will see these models are technically not AGI - they are trained to do one very specific thing … given a portion of text, predict the word that will come next. More specifically these LLMs are trained to generate a probability distribution for the next word to appear after a given sequence of words.\nFor example, suppose I told you that someone just said:\n“Joe went to the ______ …” and I asked you to assign probabilities of the next word being (a) store (b) circus (c) intelligent. It’s reasonable to say that “store” would have the highest probability as it’s very common for people to go to a store, “circus” would have a somewhat lower probabability as it’s not as common for people to go to a circus and “intelligent” would have a very low probability, as it’s not quite clear what could be meant by “Joe went to the intelligent …”.\nHowever, suppose I told you that someone just said\nThe training data for these chat systems include vast amounts of printed text. It’s often said that these systems are trained on the entire Internet. While that might not be exactly accurate, it is a good way to conceptualize the real story. In actuality modern commercial LLMs are trained on massive, diverse text datasets that include:\n\nPublic web content – websites, articles, forums, and open data sources.\nBooks and academic texts – digitized literature and research papers.\nCode repositories – for models that handle programming (e.g., GitHub data).\nLicensed or proprietary datasets – curated high-quality text obtained legally.\nHuman feedback data – conversations or task examples used for fine-tuning via reinforcement learning from human feedback (RLHF).\n\nThese datasets can total trillions of words. Training involves adjusting billions of model parameters to predict the next word in a sequence — learning language, style, and reasoning patterns from the data. Several common large-scale datasets are used (or adapted) for training or pretraining LLMs. Examples include:\n\nThe Pile – 825 GB of diverse text (academic papers, books, web content, code).\nCommon Crawl – a regularly updated scrape of the public web, used by most major models.\nC4 (Colossal Clean Crawled Corpus) – a cleaned, English-focused subset of Common Crawl.\nWikipedia – high-quality encyclopedic text for factual grounding.\nBooks datasets – e.g., Books1/Books2 (used internally by OpenAI and others).\nGithub/code datasets – for code-capable models like Codex or Gemini Code.\n\nCommercial labs often combine public, licensed, and proprietary corpora, cleaning and filtering them heavily to remove low-quality, duplicate, or unsafe content.",
    "crumbs": [
      "Intro",
      "<span class='chapter-number'>1</span>  <span class='chapter-title'><yrChapterNumber>1. </yrChapterNumber> Overview of AI today</span>"
    ]
  },
  {
    "objectID": "000020-introToAi-v001.html#other-methods-of-training-an-ai",
    "href": "000020-introToAi-v001.html#other-methods-of-training-an-ai",
    "title": "1  1.  Overview of AI today",
    "section": "1.9 Other methods of training an AI",
    "text": "1.9 Other methods of training an AI\nIn the last section we discussed a learning technique where the AI is shown problems for which the answers are already known. This is generally known as “supervised learning”. Another popular method of training an AI involves the AI learning from trial and error using a method known as “reinforcement learning”.\nReinforcement learning (RL) is a type of machine learning where an agent learns by interacting with an environment and receiving feedback in the form of rewards or penalties.\nIn simple terms:\n\nThe agent takes an action in a situation.\nThe environment responds with a new situation and a reward (positive or negative).\nOver time, the agent learns a policy — a strategy for choosing actions that maximize total reward.\n\nIt’s modeled on behavioral psychology: trial, error, and feedback. For example, a robot might learn to walk by trying movements, falling (negative reward), and staying upright longer (positive reward).\nMathematically, RL often uses methods like Q-learning or policy gradients to estimate which actions lead to the best long-term outcomes.\nIn short, RL is about learning from consequences, not from explicit instruction or labeled examples.",
    "crumbs": [
      "Intro",
      "<span class='chapter-number'>1</span>  <span class='chapter-title'><yrChapterNumber>1. </yrChapterNumber> Overview of AI today</span>"
    ]
  },
  {
    "objectID": "000020-introToAi-v001.html#shortcomings-of-modern-ai-systems",
    "href": "000020-introToAi-v001.html#shortcomings-of-modern-ai-systems",
    "title": "1  1.  Overview of AI today",
    "section": "1.10 Shortcomings of modern AI systems",
    "text": "1.10 Shortcomings of modern AI systems\nArtificial Intelligence (AI) has achieved impressive results across domains such as natural language processing (NLP), computer vision, and generative content creation. Modern models can summarize long texts, generate code, compose music, and even create photorealistic images.\nHowever, limitations persist-AI struggles with reasoning, factual accuracy, long-term context retention, and transparency in decision-making. Bias and hallucination remain active research challenges.",
    "crumbs": [
      "Intro",
      "<span class='chapter-number'>1</span>  <span class='chapter-title'><yrChapterNumber>1. </yrChapterNumber> Overview of AI today</span>"
    ]
  },
  {
    "objectID": "000020-introToAi-v001.html#popular-ai-tools-and-models",
    "href": "000020-introToAi-v001.html#popular-ai-tools-and-models",
    "title": "1  1.  Overview of AI today",
    "section": "1.11 Popular AI Tools and Models",
    "text": "1.11 Popular AI Tools and Models\n\nLarge Language Models (LLMs): GPT-5, Claude, Gemini, Mistral, LLaMA\n\nImage and Video Models: Midjourney, DALL-E, Stable Diffusion, Runway\n\nSpeech and Audio: Whisper, ElevenLabs, AudioCraft\n\nMultimodal Models: OpenAI’s o1, Gemini 2.0, and LLaVA",
    "crumbs": [
      "Intro",
      "<span class='chapter-number'>1</span>  <span class='chapter-title'><yrChapterNumber>1. </yrChapterNumber> Overview of AI today</span>"
    ]
  },
  {
    "objectID": "000020-introToAi-v001.html#ai-tools-for-data-analytics",
    "href": "000020-introToAi-v001.html#ai-tools-for-data-analytics",
    "title": "1  1.  Overview of AI today",
    "section": "1.12 AI Tools for Data Analytics",
    "text": "1.12 AI Tools for Data Analytics\nAI is increasingly automating analytics pipelines: - Data prep: PandasAI, AutoML, Databricks Copilot\n- Visualization: Tableau’s AI Insights, Power BI Copilot\n- Exploratory analysis: ChatGPT Advanced Data Analysis, Jupyter + LLM integrations\nThe focus is shifting from manual data wrangling to natural-language interaction with datasets.",
    "crumbs": [
      "Intro",
      "<span class='chapter-number'>1</span>  <span class='chapter-title'><yrChapterNumber>1. </yrChapterNumber> Overview of AI today</span>"
    ]
  },
  {
    "objectID": "000020-introToAi-v001.html#running-ai-models-locally-vs.-remotely",
    "href": "000020-introToAi-v001.html#running-ai-models-locally-vs.-remotely",
    "title": "1  1.  Overview of AI today",
    "section": "1.13 Running AI Models Locally vs. Remotely",
    "text": "1.13 Running AI Models Locally vs. Remotely\n\nLocally: Better privacy and control; limited by hardware (GPU, RAM).\n\nRemotely (Cloud): Scalability and access to powerful infrastructure; may involve higher latency and cost.\nHybrid setups allow on-device inference with optional cloud extensions.",
    "crumbs": [
      "Intro",
      "<span class='chapter-number'>1</span>  <span class='chapter-title'><yrChapterNumber>1. </yrChapterNumber> Overview of AI today</span>"
    ]
  },
  {
    "objectID": "000020-introToAi-v001.html#privacy-and-security-concerns",
    "href": "000020-introToAi-v001.html#privacy-and-security-concerns",
    "title": "1  1.  Overview of AI today",
    "section": "1.14 Privacy and Security Concerns",
    "text": "1.14 Privacy and Security Concerns\nKey issues include: - Data leakage during prompt submission\n- Model inversion attacks\n- Unintended data retention by third-party APIs\nResponsible developers anonymize inputs, use local models for sensitive data, and follow compliance frameworks like GDPR and HIPAA.",
    "crumbs": [
      "Intro",
      "<span class='chapter-number'>1</span>  <span class='chapter-title'><yrChapterNumber>1. </yrChapterNumber> Overview of AI today</span>"
    ]
  },
  {
    "objectID": "000020-introToAi-v001.html#legal-and-ethical-considerations",
    "href": "000020-introToAi-v001.html#legal-and-ethical-considerations",
    "title": "1  1.  Overview of AI today",
    "section": "1.15 Legal and Ethical Considerations",
    "text": "1.15 Legal and Ethical Considerations\nTopics include: - Copyright: AI-generated works and training data ownership\n- Accountability: Who is responsible for model outputs?\n- Bias and Fairness: Ensuring equitable results across demographics\nEthical AI development involves transparency, reproducibility, and human oversight.",
    "crumbs": [
      "Intro",
      "<span class='chapter-number'>1</span>  <span class='chapter-title'><yrChapterNumber>1. </yrChapterNumber> Overview of AI today</span>"
    ]
  },
  {
    "objectID": "000020-introToAi-v001.html#expert-projections-on-ais-trajectory",
    "href": "000020-introToAi-v001.html#expert-projections-on-ais-trajectory",
    "title": "1  1.  Overview of AI today",
    "section": "1.16 Expert Projections on AI’s Trajectory",
    "text": "1.16 Expert Projections on AI’s Trajectory\nAnalysts predict: - Short-term (1–3 years): Broader multimodality, longer context windows, AI-assisted software engineering.\n- Medium-term (3–7 years): More autonomous agents, integrated reasoning systems, and cross-domain synthesis.\nAI is expected to become more context-aware and energy-efficient.",
    "crumbs": [
      "Intro",
      "<span class='chapter-number'>1</span>  <span class='chapter-title'><yrChapterNumber>1. </yrChapterNumber> Overview of AI today</span>"
    ]
  },
  {
    "objectID": "000020-introToAi-v001.html#context-length-issues",
    "href": "000020-introToAi-v001.html#context-length-issues",
    "title": "1  1.  Overview of AI today",
    "section": "1.17 Context Length Issues",
    "text": "1.17 Context Length Issues\nModels have a maximum “context window”-the amount of text they can process at once.\nWhen exceeded, older parts of a conversation or codebase are forgotten. Chunking, summarization, and retrieval-augmented generation (RAG) mitigate this.",
    "crumbs": [
      "Intro",
      "<span class='chapter-number'>1</span>  <span class='chapter-title'><yrChapterNumber>1. </yrChapterNumber> Overview of AI today</span>"
    ]
  },
  {
    "objectID": "000020-introToAi-v001.html#prompting---best-practices",
    "href": "000020-introToAi-v001.html#prompting---best-practices",
    "title": "1  1.  Overview of AI today",
    "section": "1.18 Prompting - Best Practices",
    "text": "1.18 Prompting - Best Practices\n\nBe explicit: Provide role, goal, and format.\n\nUse structured inputs: Lists, delimiters, and examples.\n\nIterate: Refine prompts based on output.\n\nEmploy system prompts to steer tone and expertise.\n\nDocument prompts for reproducibility.",
    "crumbs": [
      "Intro",
      "<span class='chapter-number'>1</span>  <span class='chapter-title'><yrChapterNumber>1. </yrChapterNumber> Overview of AI today</span>"
    ]
  },
  {
    "objectID": "000020-introToAi-v001.html#key-definitions",
    "href": "000020-introToAi-v001.html#key-definitions",
    "title": "1  1.  Overview of AI today",
    "section": "1.19 Key Definitions",
    "text": "1.19 Key Definitions\n\n1.19.1 Machine Learning\nThe process of getting computers to recognize patterns in data by training computer “models” with existing data.\n\nTwo Main Types:\n\nPredictive Analytics - Models learn to recognize patterns in training data so they can identify those same patterns in new, unseen data\n\nExample: Email spam detection, weather forecasting, stock price prediction\n\nDescriptive Analytics - Analyzing existing data using computer models to understand what happened\n\nExample: Clustering models that separate data into naturally occurring categories, allowing analysts to discover hidden patterns and make meaning from each group\n\n\n\n\n\n1.19.2 Deep Learning\nA subset of machine learning that uses Artificial Neural Networks (ANNs) to mimic the structure and function of the human brain.\n\nUses multiple layers of interconnected nodes (neurons)\nParticularly effective for complex pattern recognition tasks\nPowers most modern AI breakthroughs including LLMs\n\n\n\n1.19.3 Large Language Models (LLMs)\nAI systems trained on vast amounts of text data to understand and generate human-like language.\n\nPopular LLM Platforms:\n\nOpenAI: ChatGPT, GPT-4\nAnthropic: Claude.ai\nGoogle: Gemini.com\nMeta: Llama models (available through Ollama)\nxAI: Grok (integrated with X/Twitter)\n\n\n\n\n1.19.4 Generative AI (GenAI)\nAI systems that can create new content across various media types.\n\nApplications:\n\nText Generation: ChatGPT, Claude, writing assistants\nImage Generation: Midjourney, DALL-E, Stable Diffusion\nVideo Generation: Sora (OpenAI), Runway ML\nCode Generation: GitHub Copilot, Cursor\nScientific Applications: Molecular structure design for drug discovery\n\n\n\n\n1.19.5 Reinforcement Learning\nA machine learning approach where models learn by interacting with an environment and receiving feedback (rewards/penalties) based on their actions.\n\nKey Examples:\n\nGame-playing AI (Chess, Go, Atari games)\nRobotics and autonomous systems\nTraining ChatGPT through human feedback (RLHF - Reinforcement Learning from Human Feedback)",
    "crumbs": [
      "Intro",
      "<span class='chapter-number'>1</span>  <span class='chapter-title'><yrChapterNumber>1. </yrChapterNumber> Overview of AI today</span>"
    ]
  },
  {
    "objectID": "000020-introToAi-v001.html#key-figures-in-ai",
    "href": "000020-introToAi-v001.html#key-figures-in-ai",
    "title": "1  1.  Overview of AI today",
    "section": "1.20 Key Figures in AI",
    "text": "1.20 Key Figures in AI\n\n1.20.1 Geoffrey Hinton\n\n“The Godfather of AI”\nPioneer of modern deep learning and neural networks\nWon Turing Award (2018) and Nobel Prize in Physics (2024)\nFormer Google researcher, now advocates for AI safety\n\n\n\n1.20.2 Ilya Sutskever\n\nCo-founder and former Chief Scientist at OpenAI\nKey contributor to transformer architecture (foundation of modern LLMs)\nCurrently working on AI safety research\n\n\n\n1.20.3 Demis Hassabis\n\nCEO of Google DeepMind\nFounded DeepMind (acquired by Google in 2014)\nWon Nobel Prize in Chemistry (2024) for AlphaFold protein structure prediction\nLed development of AlphaGo, first AI to beat world champion in Go\n\n\n\n1.20.4 Sam Altman\n\nCEO of OpenAI\nCo-founded OpenAI with Elon Musk and others (2015)\nLed OpenAI’s transition from non-profit to capped-profit structure\n\n\n\n1.20.5 Elon Musk\n\nCo-founded OpenAI but left the board in 2018 due to conflicts\nFounded xAI (2023) to create “maximum truth-seeking AI”\nOwns X (formerly Twitter), which integrates with Grok AI",
    "crumbs": [
      "Intro",
      "<span class='chapter-number'>1</span>  <span class='chapter-title'><yrChapterNumber>1. </yrChapterNumber> Overview of AI today</span>"
    ]
  },
  {
    "objectID": "000020-introToAi-v001.html#how-llm-technology-works",
    "href": "000020-introToAi-v001.html#how-llm-technology-works",
    "title": "1  1.  Overview of AI today",
    "section": "1.21 How LLM Technology Works",
    "text": "1.21 How LLM Technology Works\n\n1.21.1 Core Mechanism: Next-Token Prediction\n\nLLMs are fundamentally predictive models that calculate probability distributions for the next word (token) in a sequence\nThey don’t “understand” language in human terms, but excel at predicting statistically likely continuations\n\n\n\n1.21.2 Context Window\n\nThe context refers to all the text that precedes the word being generated\nModern LLMs can process contexts of 100K+ tokens (roughly 75K+ words)\nLarger context windows enable better understanding of long documents and conversations\n\n\n\n1.21.3 Training Process\n\nPre-training: Model learns patterns from massive text datasets\nFine-tuning: Model is refined for specific tasks\nRLHF: Human feedback shapes model behavior and safety",
    "crumbs": [
      "Intro",
      "<span class='chapter-number'>1</span>  <span class='chapter-title'><yrChapterNumber>1. </yrChapterNumber> Overview of AI today</span>"
    ]
  },
  {
    "objectID": "000030-introToAiasd-v001.html",
    "href": "000030-introToAiasd-v001.html",
    "title": "2  2.  Intro to Coding with an LLM",
    "section": "",
    "text": "2.1 What Is AI-Assisted Development?\nLLMs can act as pair programmers-explaining concepts, debugging, and generating code snippets.\nDevelopers should verify AI-generated code and understand its logic, using LLMs as accelerators, not replacements.",
    "crumbs": [
      "Intro",
      "<span class='chapter-number'>2</span>  <span class='chapter-title'><yrChapterNumber>2. </yrChapterNumber> Intro to Coding with an LLM</span>"
    ]
  },
  {
    "objectID": "000030-introToAiasd-v001.html#what-is-ai-assisted-development",
    "href": "000030-introToAiasd-v001.html#what-is-ai-assisted-development",
    "title": "2  2.  Intro to Coding with an LLM",
    "section": "",
    "text": "Using AI tools (e.g., GitHub Copilot, ChatGPT, Tabnine) to help write, debug, and document code.\nWorks through natural language prompts → AI generates suggestions.\nGoal: Accelerate productivity, not replace developers.\n\n\n2.1.1 Benefits\n\nFaster prototyping: Generate boilerplate & starter code.\nImproved productivity: Offload repetitive coding tasks.\nLearning aid: Explore unfamiliar libraries, frameworks, or languages.\nDebugging help: Suggest fixes, highlight possible errors.\nDocumentation: Generate comments, READMEs, or summaries.\n\n\n\n2.1.2 Limitations\n\nNot always correct: AI can produce plausible but wrong code.\nSecurity risks: May introduce vulnerabilities.\nBias & licensing: Trained on public data → risk of copyright/ethical issues.\nContext gaps: AI may miss project-specific conventions or requirements.",
    "crumbs": [
      "Intro",
      "<span class='chapter-number'>2</span>  <span class='chapter-title'><yrChapterNumber>2. </yrChapterNumber> Intro to Coding with an LLM</span>"
    ]
  },
  {
    "objectID": "000030-introToAiasd-v001.html#essential-technologies-for-ai-assisted-development",
    "href": "000030-introToAiasd-v001.html#essential-technologies-for-ai-assisted-development",
    "title": "2  2.  Intro to Coding with an LLM",
    "section": "2.2 Essential Technologies for AI-Assisted Development",
    "text": "2.2 Essential Technologies for AI-Assisted Development\n\n2.2.1 Markdown\n\nLightweight markup language for formatting text\nStandard for documentation, README files, and AI-generated content\nEasy to read in plain text and renders beautifully when formatted\n\n\n\n2.2.2 Command Line Interface (CLI) / Bash\n\nEssential for efficient development workflows\nMany of the more advanced AI coding tools integrate with terminal/command line\nBash scripting automates repetitive development tasks\nGit version control operates primarily through CLI\n\n\n\n2.2.3 Additional Development Tools\n\nVersion Control: Git and GitHub for code management\nPackage Managers: npm (Node.js), pip (Python), cargo (Rust)\nContainerization: Docker for consistent development environments\nCloud Platforms: AWS, Google Cloud, Azure for deployment",
    "crumbs": [
      "Intro",
      "<span class='chapter-number'>2</span>  <span class='chapter-title'><yrChapterNumber>2. </yrChapterNumber> Intro to Coding with an LLM</span>"
    ]
  },
  {
    "objectID": "000030-introToAiasd-v001.html#ai-assisted-development-workflow",
    "href": "000030-introToAiasd-v001.html#ai-assisted-development-workflow",
    "title": "2  2.  Intro to Coding with an LLM",
    "section": "2.3 AI-Assisted Development Workflow",
    "text": "2.3 AI-Assisted Development Workflow\n\n2.3.1 1. Planning & Architecture\n\nUse AI to brainstorm project structure\nGenerate technical specifications and documentation\nCreate user stories and feature requirements\n\n\n\n2.3.2 2. Code Generation\n\nAI can write functions, classes, and entire modules\nGenerate boilerplate code and configuration files\nCreate test cases and documentation\n\n\n\n2.3.3 3. Debugging & Optimization\n\nAI analyzes error messages and suggests fixes\nCode review and improvement recommendations\nPerformance optimization suggestions\n\n\n\n2.3.4 4. Learning & Documentation\n\nAI explains complex code and concepts\nGenerates comprehensive documentation\nCreates tutorials and learning materials",
    "crumbs": [
      "Intro",
      "<span class='chapter-number'>2</span>  <span class='chapter-title'><yrChapterNumber>2. </yrChapterNumber> Intro to Coding with an LLM</span>"
    ]
  },
  {
    "objectID": "000030-introToAiasd-v001.html#best-practices-for-ai-assisted-development",
    "href": "000030-introToAiasd-v001.html#best-practices-for-ai-assisted-development",
    "title": "2  2.  Intro to Coding with an LLM",
    "section": "2.4 Best Practices for AI-Assisted Development",
    "text": "2.4 Best Practices for AI-Assisted Development\n\n2.4.1 Effective Prompting\n\nBe specific: Provide context, requirements, and constraints\nIterate: Refine prompts based on AI responses\nVerify: Always review and test AI-generated code\n\n\n\n2.4.2 Maintain Human Oversight\n\nUnderstand the code before implementing\nTest thoroughly: AI can introduce subtle bugs\nSecurity review: AI may suggest insecure practices\n\n\n\n2.4.3 Continuous Learning\n\nStay updated: AI tools evolve rapidly\nExperiment: Try different AI models and approaches\nShare knowledge: Collaborate and learn from others’ experiences",
    "crumbs": [
      "Intro",
      "<span class='chapter-number'>2</span>  <span class='chapter-title'><yrChapterNumber>2. </yrChapterNumber> Intro to Coding with an LLM</span>"
    ]
  },
  {
    "objectID": "000030-introToAiasd-v001.html#other-material",
    "href": "000030-introToAiasd-v001.html#other-material",
    "title": "2  2.  Intro to Coding with an LLM",
    "section": "2.5 Other material",
    "text": "2.5 Other material\n\n2.5.1 Best Practices\n\nAlways review AI-generated code.\nUse AI for prototyping, scaffolding and exploration, not final production code.\nKeep security in mind: sanitize input, check dependencies.\nIterate with prompts: refine instructions for better results.\nLearn from it: treat AI as a teaching partner, not just a shortcut.\n\n\n\n2.5.2 Buzzwords for best practices\n\nContext Engineering\nSpec Driven Development\n\n\n\n2.5.3 Typical Workflows\n\nCode completion: AI predicts the next lines.\nCode generation: Write natural language → AI writes code.\nRefactoring: Ask AI to improve readability or performance.\nExplaining code: Have AI summarize or translate complex code.\nTesting: Generate test cases & unit tests automatically.\n\n\n\n2.5.4 The Human in the Loop\n\nYou remain responsible for correctness, quality, and ethics.\nAI is a tool, not a replacement.\nThink of AI like a junior developer: fast, but needs supervision.\n\n\n\n2.5.5 Spec driven development\n\nGithub specify product\nBMAD Method\n\nfollows Agile Engineering methods\npraised by many in the space\n\nnumerous others\n\n\n\n2.5.6 Key Takeaways\n\nAI can speed up development, but requires critical oversight.\nUse it to amplify creativity and productivity, not as a crutch.\nThe best developers will know when to trust AI—and when not to.",
    "crumbs": [
      "Intro",
      "<span class='chapter-number'>2</span>  <span class='chapter-title'><yrChapterNumber>2. </yrChapterNumber> Intro to Coding with an LLM</span>"
    ]
  },
  {
    "objectID": "000100-howToInstallCursor-v002.html",
    "href": "000100-howToInstallCursor-v002.html",
    "title": "3  3.  How to install Cursor on your computer",
    "section": "",
    "text": "3.1 What is an Integrated Development Environment (IDE)\nCursor is an AI powered “Integrated Development Environment” (IDE) for developing software.\nAn “IDE” is a single program that has many different tools embedded inside of it to aid in creating programs. For example RStudio is an IDE that is focused on developing R programs. RStudio contains\nCursor is similar to RStudio in that it contains many different tools to help with creating programs. However, Cursor is not focused on a single language. You can develop programs in Cursor for many different languages, including, Python, R, Java, C++, JavaScript, TypeScript, Ruby, Rust, etc. etc. etc.\nOne of Cursor’s primary features is that it is integrated extensively with AI tools. From within the Cursor program, you can ask AI to help write your program, fix bugs, suggest approaches for solving a problem, brainstorm about the code, reorganize the code, etc. etc. etc.",
    "crumbs": [
      "Intro",
      "<span class='chapter-number'>3</span>  <span class='chapter-title'><yrChapterNumber>3. </yrChapterNumber> How to install Cursor on your computer</span>"
    ]
  },
  {
    "objectID": "000100-howToInstallCursor-v002.html#what-is-an-integrated-development-environment-ide",
    "href": "000100-howToInstallCursor-v002.html#what-is-an-integrated-development-environment-ide",
    "title": "3  3.  How to install Cursor on your computer",
    "section": "",
    "text": "a script editor for creating .R file\na console for typing commands that get executed immediately\nan “Environment” window that displays the values of variables\na file explorer to display the files on your computer\nmany, many other features that aid in developing R programs",
    "crumbs": [
      "Intro",
      "<span class='chapter-number'>3</span>  <span class='chapter-title'><yrChapterNumber>3. </yrChapterNumber> How to install Cursor on your computer</span>"
    ]
  },
  {
    "objectID": "000100-howToInstallCursor-v002.html#desktop-version-of-cursor-is-not-the-same-as-the-online-version",
    "href": "000100-howToInstallCursor-v002.html#desktop-version-of-cursor-is-not-the-same-as-the-online-version",
    "title": "3  3.  How to install Cursor on your computer",
    "section": "3.2 Desktop version of Cursor is not the same as the online version",
    "text": "3.2 Desktop version of Cursor is not the same as the online version\nIt is important to understand that the Cursor program is primarily a desktop application, intended to be installed on your computer (Windows, Mac, Linux). There is also a tool on the web at https://cursor.com /agents. The website tool is very different from the version of Cursor that is installed on your computer. This can be confusing.\nThe version of Cursor that is installed on your computer is the primary tool for creating software programs with AI. The tool found online at https://cursor.com/agents serves a slightly different purpose. We will first focus on the Desktop version of Cursor that is installed on your computer. We will revisit the product at https://cursor.com/agents later in the semester.",
    "crumbs": [
      "Intro",
      "<span class='chapter-number'>3</span>  <span class='chapter-title'><yrChapterNumber>3. </yrChapterNumber> How to install Cursor on your computer</span>"
    ]
  },
  {
    "objectID": "000100-howToInstallCursor-v002.html#how-to-download-and-install-cursor-on-your-computer",
    "href": "000100-howToInstallCursor-v002.html#how-to-download-and-install-cursor-on-your-computer",
    "title": "3  3.  How to install Cursor on your computer",
    "section": "3.3 How to download and install Cursor on your computer",
    "text": "3.3 How to download and install Cursor on your computer\nThe following is what you’ll see when you visit https://cursor.com for the first time:\n\nNotice that in the upper right hand corner of the screen there are TWO buttons:\n\nSign In\nDownload\n\nYou should press the “Download” button and proceed to download and install the desktop version of Cursor on your computer.\nIf you incorrectly pressed the “Sign In” button you will be signed into the web version of Cursor. Note that this is not what you should be doing. You might be directed to https://cursor.com/dashboard or to https://cursor.com/agents. You will see a webpage similar to the following:\n\nIf that happens, please sign out of the website. To do so, click on the icon for your user in the upper right hand corner of the webpage and choose “log out”. After you’ve logged out, please return to https://cursor.com and then press the Download button and install the Desktop version of the software.",
    "crumbs": [
      "Intro",
      "<span class='chapter-number'>3</span>  <span class='chapter-title'><yrChapterNumber>3. </yrChapterNumber> How to install Cursor on your computer</span>"
    ]
  },
  {
    "objectID": "000100-howToInstallCursor-v002.html#next-steps",
    "href": "000100-howToInstallCursor-v002.html#next-steps",
    "title": "3  3.  How to install Cursor on your computer",
    "section": "3.4 Next Steps",
    "text": "3.4 Next Steps\nWe will be going over in class how to use the different features of Cursor. If you want to explore a little by yourself the ctrl-shift-P key can be helpful. This hotkey lets you search through all of the different settings and features within cursor. Many people like changing the default color theme from a dark theme to a light (bright) theme. To do so, press ctrl/cmd-alt-P and type “color theme” (without the quotes). Then press “Preferences: color theme” to allow you to choose a new theme.\nThere is a lot that you can do with cursor. We will cover this in more depth in class.",
    "crumbs": [
      "Intro",
      "<span class='chapter-number'>3</span>  <span class='chapter-title'><yrChapterNumber>3. </yrChapterNumber> How to install Cursor on your computer</span>"
    ]
  },
  {
    "objectID": "000100-howToInstallCursor-v002.html#explorer",
    "href": "000100-howToInstallCursor-v002.html#explorer",
    "title": "3  3.  How to install Cursor on your computer",
    "section": "4.1 Explorer",
    "text": "4.1 Explorer\n\n4.1.1 Open a folder",
    "crumbs": [
      "Intro",
      "<span class='chapter-number'>3</span>  <span class='chapter-title'><yrChapterNumber>3. </yrChapterNumber> How to install Cursor on your computer</span>"
    ]
  },
  {
    "objectID": "000100-howToInstallCursor-v002.html#git-integration-in-explorer",
    "href": "000100-howToInstallCursor-v002.html#git-integration-in-explorer",
    "title": "3  3.  How to install Cursor on your computer",
    "section": "4.2 Git integration in Explorer",
    "text": "4.2 Git integration in Explorer",
    "crumbs": [
      "Intro",
      "<span class='chapter-number'>3</span>  <span class='chapter-title'><yrChapterNumber>3. </yrChapterNumber> How to install Cursor on your computer</span>"
    ]
  },
  {
    "objectID": "000100-howToInstallCursor-v002.html#ctrl-shift-p---show-menu-from-which-you-can-search-for-any-cursor-feature",
    "href": "000100-howToInstallCursor-v002.html#ctrl-shift-p---show-menu-from-which-you-can-search-for-any-cursor-feature",
    "title": "3  3.  How to install Cursor on your computer",
    "section": "4.3 ctrl-shift-P - show menu from which you can search for any Cursor feature",
    "text": "4.3 ctrl-shift-P - show menu from which you can search for any Cursor feature",
    "crumbs": [
      "Intro",
      "<span class='chapter-number'>3</span>  <span class='chapter-title'><yrChapterNumber>3. </yrChapterNumber> How to install Cursor on your computer</span>"
    ]
  },
  {
    "objectID": "000100-howToInstallCursor-v002.html#chat-modes---ask-agent-background-plan",
    "href": "000100-howToInstallCursor-v002.html#chat-modes---ask-agent-background-plan",
    "title": "3  3.  How to install Cursor on your computer",
    "section": "4.4 Chat modes - ask, agent, background, plan",
    "text": "4.4 Chat modes - ask, agent, background, plan",
    "crumbs": [
      "Intro",
      "<span class='chapter-number'>3</span>  <span class='chapter-title'><yrChapterNumber>3. </yrChapterNumber> How to install Cursor on your computer</span>"
    ]
  },
  {
    "objectID": "000100-howToInstallCursor-v002.html#browser-control",
    "href": "000100-howToInstallCursor-v002.html#browser-control",
    "title": "3  3.  How to install Cursor on your computer",
    "section": "4.5 browser control",
    "text": "4.5 browser control\n\n\n\nYouTube - Cursor Browser Control\n\n\nYou might have to allow this in your settings:\n\nctrl-shift-P, settings\nchoose Beta from left hand menu\nlook for “Cursor Browser” and make sure it is enabled.",
    "crumbs": [
      "Intro",
      "<span class='chapter-number'>3</span>  <span class='chapter-title'><yrChapterNumber>3. </yrChapterNumber> How to install Cursor on your computer</span>"
    ]
  },
  {
    "objectID": "000100-howToInstallCursor-v002.html#deep-links",
    "href": "000100-howToInstallCursor-v002.html#deep-links",
    "title": "3  3.  How to install Cursor on your computer",
    "section": "4.6 deep links",
    "text": "4.6 deep links",
    "crumbs": [
      "Intro",
      "<span class='chapter-number'>3</span>  <span class='chapter-title'><yrChapterNumber>3. </yrChapterNumber> How to install Cursor on your computer</span>"
    ]
  },
  {
    "objectID": "000210-introToBashAndCli-v001.html",
    "href": "000210-introToBashAndCli-v001.html",
    "title": "4  4.  Intro to Bash (and CLIs)",
    "section": "",
    "text": "4.1 What are the benefits of using a CLI (Command Line Interpreter)?\nThe “user interface” on a computer is the mechanism with which users instruct the computer to do specific things. Non-technical users interact with computers by using the mouse to click and drag items on the screen. These users are using the “Graphical User Interface” (GUI) of the computer (see below for more info). Most people are not even aware that there is a way to do just about everything on a computer without even touching a mouse.\nTechnical users (e.g. programmers, computer system administrators, etc) often use a totally different mechanism to interact with the computer. They use a special program (known as a CLI or “command line interpreter”) to type special “commands” to do different things on the computer. For example, a technically inclined user, might type the command mkdir progressReports to create a new folder named progressReports. By contrast, non-technical users might right-click in the FileExplorer (Windows) or Finder (Mac) programs and choose “new file” from the menu that is displayed.\nThere many, many (hundreds?) of different commands that can be typed in the CLI program. Each command is used to accomplish something specific on the computer. Using a CLI is a skill, similar to programming, that takes some time to master. It is obviously much easier for a typical computer user to use the GUI on the computer. Most people aren’t even aware there is another way. Why then would technical users use a Comamnd Line Interface at all?\nIt takes time and practice to master how to control a computer by using a CLI (command line interface). However, for technical users, the time spent learning how to use a CLI is time well spent. For the following reasons:",
    "crumbs": [
      "Intro",
      "<span class='chapter-number'>4</span>  <span class='chapter-title'><yrChapterNumber>4. </yrChapterNumber> Intro to Bash (and CLIs)</span>"
    ]
  },
  {
    "objectID": "000210-introToBashAndCli-v001.html#what-are-the-benefits-of-using-a-cli-command-line-interpreter",
    "href": "000210-introToBashAndCli-v001.html#what-are-the-benefits-of-using-a-cli-command-line-interpreter",
    "title": "4  4.  Intro to Bash (and CLIs)",
    "section": "",
    "text": "Many tools that are used in software development only have a CLI commands with no equivalent GUI program.\nOnce you have learned and mastered the numerous CLI commands, it can become trivial to accomplish very sophisticated results with much less effort than would be required if only using a GUI. A technical user might type the command mv project1/*2025* project2 to move all files with 2025 in their name from the project1 folder to the project2 folder. If there are 100 files in the project1 folder and 50 of those files have 2025 somewhere in their name, a typical non-technical user might take several minutes or longer to find each of the desired files and drag them to the correct folder. By contrast, typing the above command in the CLI and pressing ENTER takes a few seconds. This is a simple example. The general rule though is that for people who have mastered the CLI commands are able to control the computer in a much quicker and more efficient way.\nIt is relatively easy to “automate” the CLI commands. You can collect numerous CLI commands in a single file, known as a “script file”. Then you can direct the CLI to run all of the commands that are saved in the script file at once. This opens the door to writing script files that can be reused at different times or on different computers to accomplish a repetitive task.",
    "crumbs": [
      "Intro",
      "<span class='chapter-number'>4</span>  <span class='chapter-title'><yrChapterNumber>4. </yrChapterNumber> Intro to Bash (and CLIs)</span>"
    ]
  },
  {
    "objectID": "000210-introToBashAndCli-v001.html#how-to-install-git-and-bash",
    "href": "000210-introToBashAndCli-v001.html#how-to-install-git-and-bash",
    "title": "4  4.  Intro to Bash (and CLIs)",
    "section": "4.2 How to install Git and Bash",
    "text": "4.2 How to install Git and Bash\nYRTODO -fix this\n\n4.2.1 Mac\nStart the Terminal program to get into Bash. Newer macs run the zsh shell in Terminal - you’ll see % instead of $. To get bash just type bash and hit return\nType git –version if it prompts you to install git say yes.\n\n\n4.2.2 Windows\nDownload bash and git tools from here: https://git-scm.com/downloads",
    "crumbs": [
      "Intro",
      "<span class='chapter-number'>4</span>  <span class='chapter-title'><yrChapterNumber>4. </yrChapterNumber> Intro to Bash (and CLIs)</span>"
    ]
  },
  {
    "objectID": "000210-introToBashAndCli-v001.html#what-is-a-graphical-user-interface-gui",
    "href": "000210-introToBashAndCli-v001.html#what-is-a-graphical-user-interface-gui",
    "title": "4  4.  Intro to Bash (and CLIs)",
    "section": "4.3 What is a Graphical User Interface (GUI)?",
    "text": "4.3 What is a Graphical User Interface (GUI)?\nThe “user interface” on a computer is the mechanism with which the computer user instructs the computer to do specific things. Non-technical users interact with a computer via the “Graphical User Interface” of the computer. For example, all of the following are parts of the GUI (Graphical User Interface) on Mac and Windows\n\ndouble clicking on icons to open a program or to open a file in the appropriate program\nclicking/dragging on a titlebar to move a window to a different location\nclicking on a filename in Windows Explorer or Mac Finder and dragging the file to different folder to either move or copy the file to the other folder\nclicking on the “File” menu in Excel to get to the menu choices for opening/creating/etc files\nclicking on different pictures and text to get something to happen\netc.\n\nAll of the above features rely heavily on using the mouse to interact with “pictures” or text that appear on the computer screen.",
    "crumbs": [
      "Intro",
      "<span class='chapter-number'>4</span>  <span class='chapter-title'><yrChapterNumber>4. </yrChapterNumber> Intro to Bash (and CLIs)</span>"
    ]
  },
  {
    "objectID": "000210-introToBashAndCli-v001.html#what-is-a-cli-and-why-should-you-care",
    "href": "000210-introToBashAndCli-v001.html#what-is-a-cli-and-why-should-you-care",
    "title": "4  4.  Intro to Bash (and CLIs)",
    "section": "4.4 What is a CLI and Why Should You Care?",
    "text": "4.4 What is a CLI and Why Should You Care?\nA CLI (Command Line Interface) is a way to interact with your computer using text commands instead of clicking on icons and buttons. Think of it like texting your computer instructions instead of pointing at things.\nWhen people talk about “the command line” or “the terminal,” they’re usually referring to a CLI. It might look intimidating at first—just a black or white screen with text—but once you learn a few commands, it becomes a powerful way to work with files and folders on your computer.\n\n4.4.1 What is Bash?\nBash (which stands for “Bourne Again Shell”) is one of the most popular CLIs. It’s the standard on most Linux systems and Mac computers. When you type commands in Bash, you’re essentially having a conversation with your computer in a special language it understands.\n\n\n4.4.2 How to Access Bash on Different Systems\nOn Mac: Open the Terminal application. You can find it by pressing Cmd + Space and typing “Terminal”, or by going to Applications → Utilities → Terminal.\nOn Windows: Windows doesn’t come with Bash by default. You have a few options:\n\nGit Bash - A lightweight option that comes with Git. It’s perfect for basic Bash commands and is what we recommend for getting started.\nWSL2 (Windows Subsystem for Linux) - A full Linux environment inside Windows. This is more advanced and beyond the scope of this guide.\n\nImportant Note for Windows Users: Windows has its own native CLIs called CMD (Command Prompt) and PowerShell. These are conceptually similar to Bash—they let you type commands to control your computer—but the actual commands are different. For example, in Bash you use ls to list files, but in PowerShell you use Get-ChildItem or dir. This guide focuses on Bash commands.",
    "crumbs": [
      "Intro",
      "<span class='chapter-number'>4</span>  <span class='chapter-title'><yrChapterNumber>4. </yrChapterNumber> Intro to Bash (and CLIs)</span>"
    ]
  },
  {
    "objectID": "000210-introToBashAndCli-v001.html#our-sample-file-structure",
    "href": "000210-introToBashAndCli-v001.html#our-sample-file-structure",
    "title": "4  4.  Intro to Bash (and CLIs)",
    "section": "4.5 Our Sample File Structure",
    "text": "4.5 Our Sample File Structure\nThroughout this guide, we’ll use the same example file structure. Here’s what it looks like.\nYou can download a zip file that contains these files here.\nDownload the practice files\nbash-tutorial-files/\n├── README.txt\n├── documents/\n│   ├── notes/\n│   │   ├── ideas.txt\n│   │   └── meeting-notes.txt\n│   └── reports/\n│       ├── annual-summary.txt\n│       └── quarterly-report.txt\n├── music/\n│   ├── song1.mp3\n│   └── song2.mp3\n├── pictures/\n│   ├── family.jpg\n│   └── vacation.jpg\n└── projects/\n    ├── data-analysis/\n    │   ├── analysis.py\n    │   └── data.csv\n    └── website/\n        ├── index.html\n        └── styles.css\n\n4.5.1 How to Read This Tree Structure\n\nLines with / at the end are directories (folders)\nLines without / are files\nThe indentation shows which items are inside which folders\nFor example, ideas.txt is inside the notes/ folder, which is inside the documents/ folder\n\nNote: A directory is just another word for a folder. Computer people often use “directory” instead of “folder,” but they mean the same thing!\n\n\n4.5.2 Download the Practice Files\nWe’ve prepared a zip file with all these folders and files so you can follow along. Download and extract bash-tutorial-files.zip to a location on your computer (like your Desktop or Documents folder).",
    "crumbs": [
      "Intro",
      "<span class='chapter-number'>4</span>  <span class='chapter-title'><yrChapterNumber>4. </yrChapterNumber> Intro to Bash (and CLIs)</span>"
    ]
  },
  {
    "objectID": "000210-introToBashAndCli-v001.html#understanding-files-and-folders",
    "href": "000210-introToBashAndCli-v001.html#understanding-files-and-folders",
    "title": "4  4.  Intro to Bash (and CLIs)",
    "section": "4.6 Understanding Files and Folders",
    "text": "4.6 Understanding Files and Folders\nOne important thing to understand: files can be arranged in different folders, which means two different files can have the same name as long as they’re in different folders.\nFor example, you could have: - projects/website/README.txt - projects/data-analysis/README.txt\nThese are two completely different files, even though they’re both named README.txt. They’re in different locations (different folders), so there’s no conflict.",
    "crumbs": [
      "Intro",
      "<span class='chapter-number'>4</span>  <span class='chapter-title'><yrChapterNumber>4. </yrChapterNumber> Intro to Bash (and CLIs)</span>"
    ]
  },
  {
    "objectID": "000210-introToBashAndCli-v001.html#your-home-directory",
    "href": "000210-introToBashAndCli-v001.html#your-home-directory",
    "title": "4  4.  Intro to Bash (and CLIs)",
    "section": "4.7 Your Home Directory",
    "text": "4.7 Your Home Directory\nEvery user account on a computer has a special folder called the home directory. This is your personal space where you keep your files and folders.\n\nOn Mac/Linux: Your home directory is usually /Users/yourusername or /home/yourusername\nOn Windows (with Git Bash): It’s usually C:\\Users\\yourusername\n\nWhen you open a new terminal, you usually start in your home directory automatically. Think of it as your “home base” in the file system.",
    "crumbs": [
      "Intro",
      "<span class='chapter-number'>4</span>  <span class='chapter-title'><yrChapterNumber>4. </yrChapterNumber> Intro to Bash (and CLIs)</span>"
    ]
  },
  {
    "objectID": "000210-introToBashAndCli-v001.html#the-bash-prompt",
    "href": "000210-introToBashAndCli-v001.html#the-bash-prompt",
    "title": "4  4.  Intro to Bash (and CLIs)",
    "section": "4.8 The Bash Prompt",
    "text": "4.8 The Bash Prompt\nWhen you open your terminal, you’ll see something called the prompt. It might look like:\nuser@computer:~$\nor\nMacBook-Pro:~ username$\nor just\n$\nDon’t panic if yours looks different! The prompt varies depending on your system settings, but it all works the same way. The prompt is just Bash’s way of saying “I’m ready for your next command!”\nThe $ symbol at the end is the most important part—it signals that you can type a command. When you see example commands in this guide or online, you’ll often see them written with a $ at the start. Don’t type the $—it’s just showing you where the prompt is.",
    "crumbs": [
      "Intro",
      "<span class='chapter-number'>4</span>  <span class='chapter-title'><yrChapterNumber>4. </yrChapterNumber> Intro to Bash (and CLIs)</span>"
    ]
  },
  {
    "objectID": "000210-introToBashAndCli-v001.html#your-first-commands-where-am-i",
    "href": "000210-introToBashAndCli-v001.html#your-first-commands-where-am-i",
    "title": "4  4.  Intro to Bash (and CLIs)",
    "section": "4.9 Your First Commands: Where Am I?",
    "text": "4.9 Your First Commands: Where Am I?\n\n4.9.1 The pwd Command (Print Working Directory)\nThe first thing you usually want to know is: where am I in the file system right now? That’s what pwd does—it shows you your current location.\n$ pwd\nOutput:\n/home/username/Desktop/bash-tutorial-files\nThis output is called a full path (or “absolute path”). Let’s break it down:\n\nIt starts with / which represents the very top (root) of your entire file system\nEach / separates folder names\nReading left to right shows the path from the root to where you are now\nThis path says: “Start at the root, go into home, then username, then Desktop, then bash-tutorial-files”\n\nThink of a full path like a complete street address: “123 Main Street, Springfield, IL, USA” gives you everything you need to find a location. Similarly, /home/username/Desktop/bash-tutorial-files gives you everything you need to find this folder.",
    "crumbs": [
      "Intro",
      "<span class='chapter-number'>4</span>  <span class='chapter-title'><yrChapterNumber>4. </yrChapterNumber> Intro to Bash (and CLIs)</span>"
    ]
  },
  {
    "objectID": "000210-introToBashAndCli-v001.html#looking-around-the-ls-command",
    "href": "000210-introToBashAndCli-v001.html#looking-around-the-ls-command",
    "title": "4  4.  Intro to Bash (and CLIs)",
    "section": "4.10 Looking Around: The ls Command",
    "text": "4.10 Looking Around: The ls Command\nNow that you know where you are, let’s see what’s in this location! The ls command lists the files and folders in your current directory.\n$ ls\nOutput:\nREADME.txt  documents  music  pictures  projects\nGreat! We can see there’s a README.txt file and four folders: documents, music, pictures, and projects.\n\n4.10.1 Command Options: Making ls More Useful\nMost Bash commands have options (also called “flags”) that modify their behavior. Options usually start with a dash -.\nLet’s try ls with the -l option, which shows the “long” format with more details:\n$ ls -l\nOutput:\ntotal 4\n-rw-r--r-- 1 username username    0 Oct 22 12:00 README.txt\ndrwxr-xr-x 4 username username 4096 Oct 22 12:00 documents\ndrwxr-xr-x 2 username username 4096 Oct 22 12:00 music\ndrwxr-xr-x 2 username username 4096 Oct 22 12:00 pictures\ndrwxr-xr-x 4 username username 4096 Oct 22 12:00 projects\nNow we see much more information! The first column shows permissions, the numbers are file sizes in bytes, and we see dates and times. Lines starting with d are directories (folders), while lines starting with - are regular files.\nLet’s add the -t option, which sorts by time (newest first):\n$ ls -l -t\nOutput:\ntotal 4\ndrwxr-xr-x 4 username username 4096 Oct 22 12:00 projects\ndrwxr-xr-x 2 username username 4096 Oct 22 12:00 pictures\ndrwxr-xr-x 2 username username 4096 Oct 22 12:00 music\ndrwxr-xr-x 4 username username 4096 Oct 22 12:00 documents\n-rw-r--r-- 1 username username    0 Oct 22 12:00 README.txt\nNow add -r to reverse the sort order (oldest first):\n$ ls -l -t -r\nOutput:\ntotal 4\n-rw-r--r-- 1 username username    0 Oct 22 12:00 README.txt\ndrwxr-xr-x 4 username username 4096 Oct 22 12:00 documents\ndrwxr-xr-x 2 username username 4096 Oct 22 12:00 music\ndrwxr-xr-x 2 username username 4096 Oct 22 12:00 pictures\ndrwxr-xr-x 4 username username 4096 Oct 22 12:00 projects\n\n\n4.10.2 Options Can Be Combined and Reordered!\nHere’s something cool: the order of options doesn’t matter. These all do the same thing:\n$ ls -l -t -r\n$ ls -r -t -l\n$ ls -t -r -l\nEven better, you can combine single-letter options into one:\n$ ls -ltr\nThis is exactly the same as ls -l -t -r! It’s just shorter to type. So -ltr means “long format, sorted by time, reversed order.”",
    "crumbs": [
      "Intro",
      "<span class='chapter-number'>4</span>  <span class='chapter-title'><yrChapterNumber>4. </yrChapterNumber> Intro to Bash (and CLIs)</span>"
    ]
  },
  {
    "objectID": "000210-introToBashAndCli-v001.html#creating-new-folders-the-mkdir-command",
    "href": "000210-introToBashAndCli-v001.html#creating-new-folders-the-mkdir-command",
    "title": "4  4.  Intro to Bash (and CLIs)",
    "section": "4.11 Creating New Folders: The mkdir Command",
    "text": "4.11 Creating New Folders: The mkdir Command\nThe mkdir command lets you make a directory (create a new folder). Let’s create a new folder called temp:\n$ mkdir temp\nOutput:\n(no output - success is silent!)\nIn Bash, many commands don’t print anything when they succeed. No news is good news! Let’s verify it worked:\n$ ls\nOutput:\nREADME.txt  documents  music  pictures  projects  temp\nThere’s our new temp folder!",
    "crumbs": [
      "Intro",
      "<span class='chapter-number'>4</span>  <span class='chapter-title'><yrChapterNumber>4. </yrChapterNumber> Intro to Bash (and CLIs)</span>"
    ]
  },
  {
    "objectID": "000210-introToBashAndCli-v001.html#moving-around-the-cd-command",
    "href": "000210-introToBashAndCli-v001.html#moving-around-the-cd-command",
    "title": "4  4.  Intro to Bash (and CLIs)",
    "section": "4.12 Moving Around: The cd Command",
    "text": "4.12 Moving Around: The cd Command\nThe cd command lets you change directory—that is, move to a different folder. Let’s go into the documents folder:\n$ cd documents\nOutput:\n(no output)\nAgain, no output means success. Let’s verify where we are now:\n$ pwd\nOutput:\n/home/username/Desktop/bash-tutorial-files/documents\nPerfect! We’re now inside the documents folder. Let’s see what’s in here:\n$ ls\nOutput:\nnotes  reports\nWe can see the notes and reports folders.\n\n4.12.1 Using Full Paths with cd\nYou can jump directly to any location using a full path. Let’s go to the website folder:\n$ cd /home/username/Desktop/bash-tutorial-files/projects/website\n$ pwd\nOutput:\n/home/username/Desktop/bash-tutorial-files/projects/website\n\n\n4.12.2 Going Up One Level: The .. Shortcut\nWhat if we want to go back up to the parent folder? The parent folder is the one that contains your current folder. For example, if you’re in website, the parent is projects.\nBash has a special shortcut: .. (two periods) means “the parent directory.” Let’s try it:\n$ cd ..\n$ pwd\nOutput:\n/home/username/Desktop/bash-tutorial-files/projects\nWe moved up one level from website to projects! Let’s go up again:\n$ cd ..\n$ pwd\nOutput:\n/home/username/Desktop/bash-tutorial-files\nNow we’re back at the top of our tutorial files. You can even chain .. together. To go up two levels at once:\n$ cd documents/reports\n$ pwd\nOutput:\n/home/username/Desktop/bash-tutorial-files/documents/reports\nNow let’s go up two levels:\n$ cd ../..\n$ pwd\nOutput:\n/home/username/Desktop/bash-tutorial-files\nThe path ../.. means “go up one level, then go up another level.”\n\n\n4.12.3 Going Home\nThere are quick shortcuts to jump to your home directory:\n$ cd ~\nor just\n$ cd\nBoth take you straight to your home directory, no matter where you are!",
    "crumbs": [
      "Intro",
      "<span class='chapter-number'>4</span>  <span class='chapter-title'><yrChapterNumber>4. </yrChapterNumber> Intro to Bash (and CLIs)</span>"
    ]
  },
  {
    "objectID": "000210-introToBashAndCli-v001.html#getting-help-how-to-learn-more-about-commands",
    "href": "000210-introToBashAndCli-v001.html#getting-help-how-to-learn-more-about-commands",
    "title": "4  4.  Intro to Bash (and CLIs)",
    "section": "4.13 Getting Help: How to Learn More About Commands",
    "text": "4.13 Getting Help: How to Learn More About Commands\nYou don’t need to memorize everything! Bash has built-in help for most commands.\n\n4.13.1 The --help Option\nMany commands support a --help option that shows you how to use them:\n$ ls --help\nOutput:\nUsage: ls [OPTION]... [FILE]...\nList information about the FILEs (the current directory by default).\nSort entries alphabetically if none of -cftuvSUX nor --sort is specified.\n\nMandatory arguments to long options are mandatory for short options too.\n  -a, --all                  do not ignore entries starting with .\n  -A, --almost-all           do not list implied . and ..\n  -l                         use a long listing format\n  -r, --reverse              reverse order while sorting\n  -t                         sort by time, newest first\n  -S                         sort by file size, largest first\n  -h, --human-readable       with -l, print sizes in human readable format\n  ...\n\n\n4.13.2 Understanding Help Output\nLet’s break down what this help text means:\n\nShort options: Single letters with one dash, like -l, -t, -r\n\nThese can be combined: -ltr is the same as -l -t -r\n\nLong options: Full words with two dashes, like --all, --help, --human-readable\n\nThese usually can’t be combined\nThey’re more readable but take longer to type\n\n\nFor example, these do the same thing:\n$ ls -a\n$ ls --all\n\n\n4.13.3 Man Pages: The Full Manual\nIf a command doesn’t have --help, or if you want even more detailed information, you can look up man pages (manual pages).\nIn a full Bash environment (like on Mac or Linux), you can type:\n$ man ls\nThis opens a detailed manual page for the ls command. You can navigate with arrow keys and press q to quit.\nNote: Some lightweight Bash environments (like Git Bash on Windows) might not have man pages installed. If man doesn’t work, you can search online for “bash ls man page” or “man ls” and find the documentation online.",
    "crumbs": [
      "Intro",
      "<span class='chapter-number'>4</span>  <span class='chapter-title'><yrChapterNumber>4. </yrChapterNumber> Intro to Bash (and CLIs)</span>"
    ]
  },
  {
    "objectID": "000210-introToBashAndCli-v001.html#working-with-files-and-folders",
    "href": "000210-introToBashAndCli-v001.html#working-with-files-and-folders",
    "title": "4  4.  Intro to Bash (and CLIs)",
    "section": "4.14 Working with Files and Folders",
    "text": "4.14 Working with Files and Folders\nNow let’s learn how to create, copy, move, and delete files and folders.\n\n4.14.1 Creating Empty Files: The touch Command\nThe touch command creates an empty file or updates the timestamp of an existing file:\n$ touch test.txt\n$ ls\nOutput:\nREADME.txt  documents  music  pictures  projects  temp  test.txt\nWe created a new empty file called test.txt!\n\n\n4.14.2 Copying Files: The cp Command\nThe cp command copies files or folders. The syntax is: cp source destination\nLet’s copy our test file:\n$ cp test.txt test-copy.txt\n$ ls\nOutput:\nREADME.txt  documents  music  pictures  projects  temp  test-copy.txt  test.txt\nNow we have both the original test.txt and a copy called test-copy.txt.\nTo copy a file into a folder:\n$ cp test.txt documents/\n$ ls documents/\nOutput:\nnotes  reports  test.txt\nThe test.txt file has been copied into the documents folder!\nTo copy an entire folder (directory) and all its contents, use the -r option (which stands for “recursive”):\n$ cp -r documents documents-backup\n$ ls\nOutput:\nREADME.txt  documents  documents-backup  music  pictures  projects  temp  test-copy.txt  test.txt\n\n\n4.14.3 Moving and Renaming: The mv Command\nThe mv command moves files or folders to a new location. It’s also used to rename things!\nTo rename a file:\n$ mv test-copy.txt renamed-file.txt\n$ ls\nOutput:\nREADME.txt  documents  documents-backup  music  pictures  projects  renamed-file.txt  temp  test.txt\nThe file test-copy.txt has been renamed to renamed-file.txt.\nTo move a file into a folder:\n$ mv renamed-file.txt temp/\n$ ls temp/\nOutput:\nrenamed-file.txt\nThe file has moved into the temp folder. Notice it’s no longer in our current directory.\nYou can move and rename at the same time:\n$ mv test.txt documents/my-test-file.txt\n$ ls documents/\nOutput:\nmy-test-file.txt  notes  reports  test.txt\n\n\n4.14.4 Removing Files: The rm Command\nThe rm command removes (deletes) files. Be careful! There’s no “undo” or trash bin—deleted files are gone forever!\n$ rm documents/my-test-file.txt\n$ ls documents/\nOutput:\nnotes  reports  test.txt\nTo remove multiple files at once:\n$ cd temp/\n$ touch file1.txt file2.txt file3.txt\n$ ls\nOutput:\nfile1.txt  file2.txt  file3.txt  renamed-file.txt\n$ rm file1.txt file2.txt file3.txt\n$ ls\nOutput:\nrenamed-file.txt\nTo remove a folder and everything inside it, use -r (recursive) and usually -f (force, to avoid confirmation prompts):\n$ cd ..\n$ rm -rf documents-backup\n$ ls\nOutput:\nREADME.txt  documents  music  pictures  projects  temp\nWarning: rm -rf is very powerful and very dangerous! Always double-check what you’re deleting. There’s a famous joke: “To understand what rm -rf / does, try it!” Don’t actually try it—it would attempt to delete everything on your computer!\n\n\n4.14.5 Removing Empty Folders: The rmdir Command\nThe rmdir command removes directories, but only if they’re empty:\n$ cd temp/\n$ rm renamed-file.txt\n$ cd ..\n$ rmdir temp\n$ ls\nOutput:\nREADME.txt  documents  music  pictures  projects\nIf you try to use rmdir on a folder that has files in it, you’ll get an error:\n$ rmdir documents\nOutput:\nrmdir: failed to remove 'documents': Directory not empty\nFor non-empty folders, use rm -rf instead.",
    "crumbs": [
      "Intro",
      "<span class='chapter-number'>4</span>  <span class='chapter-title'><yrChapterNumber>4. </yrChapterNumber> Intro to Bash (and CLIs)</span>"
    ]
  },
  {
    "objectID": "000210-introToBashAndCli-v001.html#reading-files-cat-less-and-more",
    "href": "000210-introToBashAndCli-v001.html#reading-files-cat-less-and-more",
    "title": "4  4.  Intro to Bash (and CLIs)",
    "section": "4.15 Reading Files: cat, less, and more",
    "text": "4.15 Reading Files: cat, less, and more\n\n4.15.1 The cat Command\nThe cat command displays the contents of a file. It’s short for “concatenate,” but most people use it to quickly view file contents:\n$ cd documents/notes/\n$ cat ideas.txt\nOutput:\n(displays the contents of ideas.txt)\nIf the file is empty (like ours), you won’t see anything! Let’s add some content first using a different method:\n$ echo \"My brilliant idea: automated coffee maker\" &gt; ideas.txt\n$ cat ideas.txt\nOutput:\nMy brilliant idea: automated coffee maker\nYou can also use cat to view multiple files:\n$ echo \"More ideas here!\" &gt; ideas2.txt\n$ cat ideas.txt ideas2.txt\nOutput:\nMy brilliant idea: automated coffee maker\nMore ideas here!\nLimitation of cat: If the file is very long, cat dumps everything to the screen at once, and you’ll need to scroll back up to see the beginning. For long files, use less or more.\n\n\n4.15.2 The less Command\nThe less command shows file contents one page at a time, letting you scroll through:\n$ less ideas.txt\nWhen using less: - Arrow keys or spacebar to scroll down - b to scroll back up - / followed by text to search - q to quit\nless is great for long files because you have full control over navigation.\n\n\n4.15.3 The more Command\nThe more command is similar to less but older and simpler:\n$ more ideas.txt\nWith more: - Spacebar to go to the next page - Enter to go down one line - q to quit\nDifference between less and more: - less lets you scroll backward; more only goes forward - less has more features (searching, better navigation) - The joke: “less is more, and more is less!” (meaning less is actually more capable than more)\nIn practice, most people use less because it’s more flexible. But both do the job for viewing files!",
    "crumbs": [
      "Intro",
      "<span class='chapter-number'>4</span>  <span class='chapter-title'><yrChapterNumber>4. </yrChapterNumber> Intro to Bash (and CLIs)</span>"
    ]
  },
  {
    "objectID": "000210-introToBashAndCli-v001.html#quick-reference-summary-of-commands",
    "href": "000210-introToBashAndCli-v001.html#quick-reference-summary-of-commands",
    "title": "4  4.  Intro to Bash (and CLIs)",
    "section": "4.16 Quick Reference: Summary of Commands",
    "text": "4.16 Quick Reference: Summary of Commands\nHere’s a handy table of all the commands we covered:\n\n\n\nCommand\nWhat It Does\nExample\n\n\n\n\npwd\nPrint working directory (show where you are)\npwd\n\n\nls\nList files and folders\nls -ltr\n\n\ncd\nChange directory (move to another folder)\ncd documents\n\n\ncd ..\nGo up one directory level\ncd ..\n\n\ncd ~ or cd\nGo to home directory\ncd\n\n\nmkdir\nMake a new directory\nmkdir new-folder\n\n\nrmdir\nRemove an empty directory\nrmdir old-folder\n\n\ntouch\nCreate an empty file\ntouch file.txt\n\n\ncp\nCopy files or folders\ncp file.txt copy.txt\n\n\ncp -r\nCopy a folder and all contents\ncp -r folder/ backup/\n\n\nmv\nMove or rename files/folders\nmv old.txt new.txt\n\n\nrm\nRemove files\nrm file.txt\n\n\nrm -rf\nRemove folders and contents\nrm -rf folder/\n\n\ncat\nDisplay file contents\ncat file.txt\n\n\nless\nView file with scrolling\nless file.txt\n\n\nmore\nView file page by page\nmore file.txt",
    "crumbs": [
      "Intro",
      "<span class='chapter-number'>4</span>  <span class='chapter-title'><yrChapterNumber>4. </yrChapterNumber> Intro to Bash (and CLIs)</span>"
    ]
  },
  {
    "objectID": "000210-introToBashAndCli-v001.html#tips-for-learning",
    "href": "000210-introToBashAndCli-v001.html#tips-for-learning",
    "title": "4  4.  Intro to Bash (and CLIs)",
    "section": "4.17 Tips for Learning",
    "text": "4.17 Tips for Learning\n\nPractice, practice, practice! The best way to learn Bash is to use it. Try the commands in the sample directory we provided.\nDon’t be afraid to experiment in test folders. Just be careful with rm commands!\nUse Tab completion: Start typing a file or folder name and press Tab. Bash will complete it for you! This saves time and prevents typos.\nUse the up arrow to cycle through previous commands. This is super handy when you need to run the same command again.\nGoogle is your friend: When you’re stuck, search for “bash how to [what you want to do]” and you’ll find lots of help.",
    "crumbs": [
      "Intro",
      "<span class='chapter-number'>4</span>  <span class='chapter-title'><yrChapterNumber>4. </yrChapterNumber> Intro to Bash (and CLIs)</span>"
    ]
  },
  {
    "objectID": "000210-introToBashAndCli-v001.html#next-steps",
    "href": "000210-introToBashAndCli-v001.html#next-steps",
    "title": "4  4.  Intro to Bash (and CLIs)",
    "section": "4.18 Next Steps",
    "text": "4.18 Next Steps\nOnce you’re comfortable with these basic commands, you might want to explore:\n\nRedirecting output (&gt; and &gt;&gt;)\nPiping commands together (|)\nFinding files (find command)\nSearching within files (grep command)\nUsing wildcards (* and ?)\nRunning scripts (.sh files)",
    "crumbs": [
      "Intro",
      "<span class='chapter-number'>4</span>  <span class='chapter-title'><yrChapterNumber>4. </yrChapterNumber> Intro to Bash (and CLIs)</span>"
    ]
  },
  {
    "objectID": "000240-v2-introToGit-v001.html",
    "href": "000240-v2-introToGit-v001.html",
    "title": "5  5.  Intro to Git & GitHub",
    "section": "",
    "text": "5.1 Files for use in this section\nDownload the files that we will use in this section. Download the practice files",
    "crumbs": [
      "Intro",
      "<span class='chapter-number'>5</span>  <span class='chapter-title'><yrChapterNumber>5. </yrChapterNumber> Intro to Git & GitHub</span>"
    ]
  },
  {
    "objectID": "000240-v2-introToGit-v001.html#what-is-version-control-and-why-should-you-care",
    "href": "000240-v2-introToGit-v001.html#what-is-version-control-and-why-should-you-care",
    "title": "5  5.  Intro to Git & GitHub",
    "section": "5.2 What is Version Control and Why Should You Care?",
    "text": "5.2 What is Version Control and Why Should You Care?\nImagine you’re writing a document and you want to: - Save different versions as you go (without creating files like report_final.docx, report_final_v2.docx, report_final_ACTUALLY_FINAL.docx) - See exactly what changed between versions - Go back to a previous version if you make a mistake - Work on the same project with other people without overwriting each other’s work\nThat’s what version control does! It’s like having a time machine for your code and files.\nGit is the most popular version control system in the world. It keeps track of every change you make to your files, who made each change, and when. Think of it as creating “save points” in a video game—you can always go back to any save point if things go wrong.",
    "crumbs": [
      "Intro",
      "<span class='chapter-number'>5</span>  <span class='chapter-title'><yrChapterNumber>5. </yrChapterNumber> Intro to Git & GitHub</span>"
    ]
  },
  {
    "objectID": "000240-v2-introToGit-v001.html#git-vs.-githubgitlab-whats-the-difference",
    "href": "000240-v2-introToGit-v001.html#git-vs.-githubgitlab-whats-the-difference",
    "title": "5  5.  Intro to Git & GitHub",
    "section": "5.3 Git vs. GitHub/GitLab: What’s the Difference?",
    "text": "5.3 Git vs. GitHub/GitLab: What’s the Difference?\nThis confuses a lot of people, so let’s clear it up:\n\nGit is the version control software that runs on your computer\nGitHub, GitLab, and Bitbucket are websites where you can store your Git projects online\n\nThink of it like this: - Git = Microsoft Word (the software on your computer) - GitHub = Google Docs or Dropbox (a place to store and share documents online)\nYou can use Git entirely on your own computer without ever touching GitHub. But GitHub is super useful for: - Backing up your code - Sharing code with others - Collaborating on projects - Showing off your portfolio",
    "crumbs": [
      "Intro",
      "<span class='chapter-number'>5</span>  <span class='chapter-title'><yrChapterNumber>5. </yrChapterNumber> Intro to Git & GitHub</span>"
    ]
  },
  {
    "objectID": "000240-v2-introToGit-v001.html#installing-git",
    "href": "000240-v2-introToGit-v001.html#installing-git",
    "title": "5  5.  Intro to Git & GitHub",
    "section": "5.4 Installing Git",
    "text": "5.4 Installing Git\nBefore we start, you need to install Git:\nOn Mac: 1. Open Terminal 2. Type git --version and press Enter 3. If Git isn’t installed, Mac will prompt you to install it, or you can install it from git-scm.com\nOn Windows: Download and install Git from git-scm.com. This also installs Git Bash, which gives you a Bash terminal on Windows!\nOn Linux: Most Linux systems come with Git pre-installed. If not:\nsudo apt-get install git  # Ubuntu/Debian",
    "crumbs": [
      "Intro",
      "<span class='chapter-number'>5</span>  <span class='chapter-title'><yrChapterNumber>5. </yrChapterNumber> Intro to Git & GitHub</span>"
    ]
  },
  {
    "objectID": "000240-v2-introToGit-v001.html#first-time-setup-configuring-git",
    "href": "000240-v2-introToGit-v001.html#first-time-setup-configuring-git",
    "title": "5  5.  Intro to Git & GitHub",
    "section": "5.5 First Time Setup: Configuring Git",
    "text": "5.5 First Time Setup: Configuring Git\nBefore using Git, you need to tell it who you are. Git records this information with every save point (commit) you make:\n$ git config --global user.name \"Your Name\"\n$ git config --global user.email \"your.email@example.com\"\nOutput:\n(no output - success!)\nTo check your configuration:\n$ git config --global user.name\nOutput:\nYour Name\n$ git config --global user.email\nOutput:\nyour.email@example.com\nNote: Use the same email address you’ll use for GitHub (if you plan to use it).",
    "crumbs": [
      "Intro",
      "<span class='chapter-number'>5</span>  <span class='chapter-title'><yrChapterNumber>5. </yrChapterNumber> Intro to Git & GitHub</span>"
    ]
  },
  {
    "objectID": "000240-v2-introToGit-v001.html#our-sample-project",
    "href": "000240-v2-introToGit-v001.html#our-sample-project",
    "title": "5  5.  Intro to Git & GitHub",
    "section": "5.6 Our Sample Project",
    "text": "5.6 Our Sample Project\nThroughout this guide, we’ll work with a simple website project. Here’s what the folder structure looks like:\ngit-tutorial-project/\n├── .gitignore\n├── README.md\n├── css/\n│   └── style.css\n├── docs/\n└── src/\n    └── index.html\nDownload the practice files: Extract git-tutorial-project.zip to follow along.",
    "crumbs": [
      "Intro",
      "<span class='chapter-number'>5</span>  <span class='chapter-title'><yrChapterNumber>5. </yrChapterNumber> Intro to Git & GitHub</span>"
    ]
  },
  {
    "objectID": "000240-v2-introToGit-v001.html#understanding-the-git-workflow",
    "href": "000240-v2-introToGit-v001.html#understanding-the-git-workflow",
    "title": "5  5.  Intro to Git & GitHub",
    "section": "5.7 Understanding the Git Workflow",
    "text": "5.7 Understanding the Git Workflow\nBefore diving into commands, let’s understand how Git thinks about your files. Git has three main “areas”:\n\nWorking Directory - This is your normal project folder where you edit files\nStaging Area (also called “Index”) - A waiting area for changes you want to save\nRepository (also called “Repo”) - The saved history of all your commits\n\nThe basic workflow is: 1. Edit files in your working directory 2. Add changes to the staging area (choosing what to save) 3. Commit the staged changes to the repository (creating a save point)\nThink of it like taking a group photo: 1. Everyone gets ready (working directory) 2. You choose who will be in the photo (staging area) 3. You take the picture (commit)",
    "crumbs": [
      "Intro",
      "<span class='chapter-number'>5</span>  <span class='chapter-title'><yrChapterNumber>5. </yrChapterNumber> Intro to Git & GitHub</span>"
    ]
  },
  {
    "objectID": "000240-v2-introToGit-v001.html#creating-your-first-repository-git-init",
    "href": "000240-v2-introToGit-v001.html#creating-your-first-repository-git-init",
    "title": "5  5.  Intro to Git & GitHub",
    "section": "5.8 Creating Your First Repository: git init",
    "text": "5.8 Creating Your First Repository: git init\nLet’s turn our project folder into a Git repository! Navigate to the project folder:\n$ cd git-tutorial-project\n$ pwd\nOutput:\n/home/username/Desktop/git-tutorial-project\nNow initialize Git:\n$ git init\nOutput:\nInitialized empty Git repository in /home/username/Desktop/git-tutorial-project/.git/\nGreat! Git has created a hidden .git folder where it stores all the version history. You don’t need to touch this folder—Git manages it automatically.\nImportant: You only run git init once per project, when you’re starting a new repository.",
    "crumbs": [
      "Intro",
      "<span class='chapter-number'>5</span>  <span class='chapter-title'><yrChapterNumber>5. </yrChapterNumber> Intro to Git & GitHub</span>"
    ]
  },
  {
    "objectID": "000240-v2-introToGit-v001.html#checking-status-git-status",
    "href": "000240-v2-introToGit-v001.html#checking-status-git-status",
    "title": "5  5.  Intro to Git & GitHub",
    "section": "5.9 Checking Status: git status",
    "text": "5.9 Checking Status: git status\nThe git status command is your best friend. It shows you what’s changed and what state your files are in:\n$ git status\nOutput:\nOn branch main\n\nNo commits yet\n\nUntracked files:\n  (use \"git add &lt;file&gt;...\" to include in what will be committed)\n    .gitignore\n    README.md\n    css/\n    docs/\n    src/\n\nnothing added to commit but untracked files present (use \"git add\" to track)\nLet’s break this down: - “On branch main” - We’ll ignore branches for now; just know you’re on the main timeline - “No commits yet” - We haven’t created any save points yet - “Untracked files” - Git sees these files but isn’t tracking changes to them yet - The helpful message tells us to use git add to start tracking files\nPro tip: Run git status constantly! It’s your way of asking Git “what’s going on?”",
    "crumbs": [
      "Intro",
      "<span class='chapter-number'>5</span>  <span class='chapter-title'><yrChapterNumber>5. </yrChapterNumber> Intro to Git & GitHub</span>"
    ]
  },
  {
    "objectID": "000240-v2-introToGit-v001.html#adding-files-to-the-staging-area-git-add",
    "href": "000240-v2-introToGit-v001.html#adding-files-to-the-staging-area-git-add",
    "title": "5  5.  Intro to Git & GitHub",
    "section": "5.10 Adding Files to the Staging Area: git add",
    "text": "5.10 Adding Files to the Staging Area: git add\nNow let’s choose which files we want to include in our first commit. We’ll add the README file first:\n$ git add README.md\n$ git status\nOutput:\nOn branch main\n\nNo commits yet\n\nChanges to be committed:\n  (use \"git rm --cached &lt;file&gt;...\" to unstage)\n    new file:   README.md\n\nUntracked files:\n  (use \"git add &lt;file&gt;...\" to include in what will be committed)\n    .gitignore\n    css/\n    docs/\n    src/\nNotice that README.md has moved from “Untracked files” to “Changes to be committed”! It’s now in the staging area, ready to be saved.\n\n5.10.1 Adding Multiple Files\nYou can add multiple files at once:\n$ git add .gitignore src/index.html css/style.css\n$ git status\nOutput:\nOn branch main\n\nNo commits yet\n\nChanges to be committed:\n  (use \"git rm --cached &lt;file&gt;...\" to unstage)\n    new file:   .gitignore\n    new file:   README.md\n    new file:   css/style.css\n    new file:   src/index.html\n\nUntracked files:\n  (use \"git add &lt;file&gt;...\" to include in what will be committed)\n    docs/\n\n\n5.10.2 Adding Everything\nTo add all changes at once, use:\n$ git add .\nThe . means “everything in the current directory and subdirectories.” Let’s do that:\n$ git add .\n$ git status\nOutput:\nOn branch main\n\nNo commits yet\n\nChanges to be committed:\n  (use \"git rm --cached &lt;file&gt;...\" to unstage)\n    new file:   .gitignore\n    new file:   README.md\n    new file:   css/style.css\n    new file:   src/index.html\nPerfect! All our files are now staged and ready to commit.\nNote: The docs/ folder doesn’t appear because it’s empty. Git only tracks files, not empty folders.",
    "crumbs": [
      "Intro",
      "<span class='chapter-number'>5</span>  <span class='chapter-title'><yrChapterNumber>5. </yrChapterNumber> Intro to Git & GitHub</span>"
    ]
  },
  {
    "objectID": "000240-v2-introToGit-v001.html#creating-a-save-point-git-commit",
    "href": "000240-v2-introToGit-v001.html#creating-a-save-point-git-commit",
    "title": "5  5.  Intro to Git & GitHub",
    "section": "5.11 Creating a Save Point: git commit",
    "text": "5.11 Creating a Save Point: git commit\nNow let’s create our first commit—a permanent save point in the project history:\n$ git commit -m \"Initial commit: Add project structure and basic files\"\nOutput:\n[main (root-commit) a1b2c3d] Initial commit: Add project structure and basic files\n 4 files changed, 28 insertions(+)\n create mode 100644 .gitignore\n create mode 100644 README.md\n create mode 100644 css/style.css\n create mode 100644 src/index.html\nLet’s break down this command: - git commit - Creates a save point - -m - Stands for “message” (more on this below) - The text in quotes is your commit message explaining what changed\n\n5.11.1 Writing Good Commit Messages\nThe commit message is super important! It’s how you (and others) will understand what each save point contains. Good commit messages:\n\nAre clear and concise\nDescribe what changed and why\nUse present tense (“Add feature” not “Added feature”)\n\nGood examples:\ngit commit -m \"Fix login button alignment on mobile\"\ngit commit -m \"Add contact form to homepage\"\ngit commit -m \"Update README with installation instructions\"\nBad examples:\ngit commit -m \"stuff\"\ngit commit -m \"changes\"\ngit commit -m \"asdf\"\nFuture you will thank present you for good commit messages!\n\n\n5.11.2 What Just Happened?\nLet’s check the status again:\n$ git status\nOutput:\nOn branch main\nnothing to commit, working tree clean\n“Working tree clean” means there are no changes since the last commit. Everything is saved!",
    "crumbs": [
      "Intro",
      "<span class='chapter-number'>5</span>  <span class='chapter-title'><yrChapterNumber>5. </yrChapterNumber> Intro to Git & GitHub</span>"
    ]
  },
  {
    "objectID": "000240-v2-introToGit-v001.html#viewing-history-git-log",
    "href": "000240-v2-introToGit-v001.html#viewing-history-git-log",
    "title": "5  5.  Intro to Git & GitHub",
    "section": "5.12 Viewing History: git log",
    "text": "5.12 Viewing History: git log\nThe git log command shows you the history of all commits:\n$ git log\nOutput:\ncommit a1b2c3d4e5f6g7h8i9j0k1l2m3n4o5p6q7r8s9t0\nAuthor: Your Name &lt;your.email@example.com&gt;\nDate:   Wed Oct 22 12:00:00 2025 -0400\n\n    Initial commit: Add project structure and basic files\nThis shows: - Commit hash - A unique ID for this commit (the long string of letters/numbers) - Author - Who made this commit - Date - When it was made - Message - The commit message\n\n5.12.1 Making More Commits\nLet’s make some changes and create another commit. Edit the README file:\n$ echo \"## Features\" &gt;&gt; README.md\n$ echo \"- Portfolio page\" &gt;&gt; README.md\n$ echo \"- Responsive design\" &gt;&gt; README.md\nCheck what changed:\n$ git status\nOutput:\nOn branch main\nChanges not staged for commit:\n  (use \"git add &lt;file&gt;...\" to update what will be committed)\n  (use \"git restore &lt;file&gt;...\" to discard changes in working directory)\n    modified:   README.md\n\nno changes added to commit (use \"git add\" and/or \"git commit -a\")\nGit knows the file changed! Now let’s stage and commit it:\n$ git add README.md\n$ git commit -m \"Add features section to README\"\nOutput:\n[main b2c3d4e] Add features section to README\n 1 file changed, 3 insertions(+)\nNow look at the log:\n$ git log\nOutput:\ncommit b2c3d4e5f6g7h8i9j0k1l2m3n4o5p6q7r8s9t0u1\nAuthor: Your Name &lt;your.email@example.com&gt;\nDate:   Wed Oct 22 12:15:00 2025 -0400\n\n    Add features section to README\n\ncommit a1b2c3d4e5f6g7h8i9j0k1l2m3n4o5p6q7r8s9t0\nAuthor: Your Name &lt;your.email@example.com&gt;\nDate:   Wed Oct 22 12:00:00 2025 -0400\n\n    Initial commit: Add project structure and basic files\nYou now have two commits in your history! The most recent commit is shown first.\n\n\n5.12.2 Shorter Log Format\nIf git log shows too much information, try:\n$ git log --oneline\nOutput:\nb2c3d4e Add features section to README\na1b2c3d Initial commit: Add project structure and basic files\nMuch more compact! Each line shows the abbreviated commit hash and message.",
    "crumbs": [
      "Intro",
      "<span class='chapter-number'>5</span>  <span class='chapter-title'><yrChapterNumber>5. </yrChapterNumber> Intro to Git & GitHub</span>"
    ]
  },
  {
    "objectID": "000240-v2-introToGit-v001.html#seeing-what-changed-git-diff",
    "href": "000240-v2-introToGit-v001.html#seeing-what-changed-git-diff",
    "title": "5  5.  Intro to Git & GitHub",
    "section": "5.13 Seeing What Changed: git diff",
    "text": "5.13 Seeing What Changed: git diff\nThe git diff command shows exactly what changed in your files. Let’s make another change:\n$ echo \"&lt;p&gt;Contact: email@example.com&lt;/p&gt;\" &gt;&gt; src/index.html\nNow see what changed:\n$ git diff\nOutput:\ndiff --git a/src/index.html b/src/index.html\nindex 123abc..456def 100644\n--- a/src/index.html\n+++ b/src/index.html\n@@ -7,5 +7,6 @@\n &lt;body&gt;\n     &lt;h1&gt;Welcome to My Portfolio&lt;/h1&gt;\n     &lt;p&gt;Under construction!&lt;/p&gt;\n+    &lt;p&gt;Contact: email@example.com&lt;/p&gt;\n &lt;/body&gt;\n &lt;/html&gt;\nThis shows: - Lines starting with - were removed (in red on terminals that support color) - Lines starting with + were added (in green) - Lines without + or - are context (unchanged lines around the change)\n\n5.13.1 Diff After Staging\nIf you add the file to staging, git diff won’t show anything:\n$ git add src/index.html\n$ git diff\nOutput:\n(no output)\nTo see differences between staged changes and the last commit, use:\n$ git diff --staged\nOutput:\ndiff --git a/src/index.html b/src/index.html\nindex 123abc..456def 100644\n--- a/src/index.html\n+++ b/src/index.html\n@@ -7,5 +7,6 @@\n &lt;body&gt;\n     &lt;h1&gt;Welcome to My Portfolio&lt;/h1&gt;\n     &lt;p&gt;Under construction!&lt;/p&gt;\n+    &lt;p&gt;Contact: email@example.com&lt;/p&gt;\n &lt;/body&gt;\n &lt;/html&gt;\nNow commit this change:\n$ git commit -m \"Add contact information to homepage\"\nOutput:\n[main c3d4e5f] Add contact information to homepage\n 1 file changed, 1 insertion(+)",
    "crumbs": [
      "Intro",
      "<span class='chapter-number'>5</span>  <span class='chapter-title'><yrChapterNumber>5. </yrChapterNumber> Intro to Git & GitHub</span>"
    ]
  },
  {
    "objectID": "000240-v2-introToGit-v001.html#ignoring-files-the-.gitignore-file",
    "href": "000240-v2-introToGit-v001.html#ignoring-files-the-.gitignore-file",
    "title": "5  5.  Intro to Git & GitHub",
    "section": "5.14 Ignoring Files: The .gitignore File",
    "text": "5.14 Ignoring Files: The .gitignore File\nSometimes you don’t want Git to track certain files—like temporary files, build artifacts, or files with passwords. That’s what .gitignore is for!\nOur .gitignore file already contains:\n# Operating system files\n.DS_Store\nThumbs.db\n\n# Editor files\n*.swp\n*.swo\n*~\n\n# Build artifacts\nbuild/\ndist/\n*.log\nThis tells Git to ignore: - Mac’s .DS_Store files - Windows’ Thumbs.db files - Vim swap files - Any build/ or dist/ folders - Any .log files\nThe * is a wildcard meaning “anything.” So *.log means “ignore all files ending in .log”\n\n5.14.1 Testing .gitignore\nLet’s create a file that should be ignored:\n$ touch debug.log\n$ git status\nOutput:\nOn branch main\nnothing to commit, working tree clean\nNotice that debug.log doesn’t show up! Git is ignoring it because of our .gitignore file.\nNow create a file that isn’t ignored:\n$ touch notes.txt\n$ git status\nOutput:\nOn branch main\nUntracked files:\n  (use \"git add &lt;file&gt;...\" to include in what will be committed)\n    notes.txt\n\nnothing added to commit but untracked files present (use \"git add\" to track)\nGit sees notes.txt because it’s not in .gitignore!\nCommon things to add to .gitignore: - node_modules/ (for JavaScript projects) - __pycache__/ and *.pyc (for Python projects) - .env (files with environment variables/secrets) - *.secret or *.key (any files with sensitive data)\nLet’s clean up:\n$ rm notes.txt debug.log",
    "crumbs": [
      "Intro",
      "<span class='chapter-number'>5</span>  <span class='chapter-title'><yrChapterNumber>5. </yrChapterNumber> Intro to Git & GitHub</span>"
    ]
  },
  {
    "objectID": "000240-v2-introToGit-v001.html#working-with-remote-repositories",
    "href": "000240-v2-introToGit-v001.html#working-with-remote-repositories",
    "title": "5  5.  Intro to Git & GitHub",
    "section": "5.15 Working with Remote Repositories",
    "text": "5.15 Working with Remote Repositories\nSo far, everything we’ve done is on your local computer. Now let’s learn how to work with remote repositories (like on GitHub).\n\n5.15.1 Cloning a Repository: git clone\nWhen you want to download someone else’s project (or your own from GitHub), you use git clone:\n$ git clone https://github.com/username/repository-name.git\nOutput:\nCloning into 'repository-name'...\nremote: Enumerating objects: 50, done.\nremote: Counting objects: 100% (50/50), done.\nremote: Compressing objects: 100% (35/35), done.\nremote: Total 50 (delta 10), reused 45 (delta 8), pack-reused 0\nReceiving objects: 100% (50/50), 12.34 KiB | 1.23 MiB/s, done.\nResolving deltas: 100% (10/10), done.\nThis creates a new folder with the entire project and all its Git history!\nNote: You don’t need to run git init after cloning—the repository is already set up.\n\n\n5.15.2 Checking Remote Connections: git remote\nTo see which remote repositories your project is connected to:\n$ git remote\nOutput:\n(no output if you used git init)\nIf you had cloned from GitHub, you’d see:\norigin\n“Origin” is the conventional name for the main remote repository.\nTo see more details:\n$ git remote -v\nOutput:\n(no output if no remotes are configured)\nWith a remote configured, you’d see:\norigin  https://github.com/username/repository-name.git (fetch)\norigin  https://github.com/username/repository-name.git (push)\n\n\n5.15.3 Adding a Remote: git remote add\nIf you started with git init (not git clone) and want to connect to GitHub later, you can add a remote:\n$ git remote add origin https://github.com/username/repository-name.git\nOutput:\n(no output - success!)\nNow verify:\n$ git remote -v\nOutput:\norigin  https://github.com/username/repository-name.git (fetch)\norigin  https://github.com/username/repository-name.git (push)\n\n\n5.15.4 Sending Changes to Remote: git push\nAfter making commits locally, you send them to GitHub with git push:\n$ git push origin main\nThis means “push my commits to the ‘origin’ remote, on the ‘main’ branch.”\nOutput:\nEnumerating objects: 12, done.\nCounting objects: 100% (12/12), done.\nDelta compression using up to 8 threads\nCompressing objects: 100% (8/8), done.\nWriting objects: 100% (9/9), 1.23 KiB | 1.23 MiB/s, done.\nTotal 9 (delta 3), reused 0 (delta 0), pack-reused 0\nTo https://github.com/username/repository-name.git\n   a1b2c3d..c3d4e5f  main -&gt; main\nYour changes are now on GitHub for the world to see!\nFirst-time push: The very first time you push, you might need:\n$ git push -u origin main\nThe -u sets up tracking so future pushes can just be git push without specifying origin main.\n\n\n5.15.5 Getting Changes from Remote: git pull\nIf others made changes on GitHub (or you made changes from another computer), you can download them with git pull:\n$ git pull origin main\nOutput:\nremote: Enumerating objects: 5, done.\nremote: Counting objects: 100% (5/5), done.\nremote: Compressing objects: 100% (3/3), done.\nremote: Total 3 (delta 1), reused 0 (delta 0), pack-reused 0\nUnpacking objects: 100% (3/3), 654 bytes | 654.00 KiB/s, done.\nFrom https://github.com/username/repository-name\n   c3d4e5f..d4e5f6g  main       -&gt; origin/main\nUpdating c3d4e5f..d4e5f6g\nFast-forward\n README.md | 2 ++\n 1 file changed, 2 insertions(+)\nThis downloads new commits and merges them into your local repository.\nPro tip: Always git pull before starting work to make sure you have the latest changes!",
    "crumbs": [
      "Intro",
      "<span class='chapter-number'>5</span>  <span class='chapter-title'><yrChapterNumber>5. </yrChapterNumber> Intro to Git & GitHub</span>"
    ]
  },
  {
    "objectID": "000240-v2-introToGit-v001.html#the-complete-workflow-putting-it-all-together",
    "href": "000240-v2-introToGit-v001.html#the-complete-workflow-putting-it-all-together",
    "title": "5  5.  Intro to Git & GitHub",
    "section": "5.16 The Complete Workflow: Putting It All Together",
    "text": "5.16 The Complete Workflow: Putting It All Together\nHere’s the typical workflow you’ll use every day:\n\nStart your work session:\n$ git pull origin main     # Get latest changes from team\nMake changes to your files (edit, create, delete files)\nCheck what changed:\n$ git status              # See what files changed\n$ git diff                # See exactly what changed\nStage your changes:\n$ git add .               # Add all changes\n# OR\n$ git add file1.txt file2.txt  # Add specific files\nCommit your changes:\n$ git commit -m \"Descriptive message about what you did\"\nPush to remote:\n$ git push origin main    # Send changes to GitHub\nRepeat! Go back to step 2 for your next set of changes.",
    "crumbs": [
      "Intro",
      "<span class='chapter-number'>5</span>  <span class='chapter-title'><yrChapterNumber>5. </yrChapterNumber> Intro to Git & GitHub</span>"
    ]
  },
  {
    "objectID": "000240-v2-introToGit-v001.html#common-scenarios-and-solutions",
    "href": "000240-v2-introToGit-v001.html#common-scenarios-and-solutions",
    "title": "5  5.  Intro to Git & GitHub",
    "section": "5.17 Common Scenarios and Solutions",
    "text": "5.17 Common Scenarios and Solutions\n\n5.17.1 “I forgot what I changed!”\n$ git status         # See which files changed\n$ git diff           # See the actual changes\n\n\n5.17.2 “I added the wrong file to staging!”\n$ git reset HEAD filename.txt    # Unstage a file\n\n\n5.17.3 “I made a typo in my commit message!”\nIf you haven’t pushed yet:\n$ git commit --amend -m \"Correct message\"\n\n\n5.17.4 “I want to see my commit history!”\n$ git log --oneline --graph    # Compact, visual view\n\n\n5.17.5 “I want to discard my changes and start over!”\nWarning: This permanently deletes your changes!\n$ git checkout -- filename.txt    # Discard changes to one file\n# OR\n$ git reset --hard HEAD           # Discard ALL changes",
    "crumbs": [
      "Intro",
      "<span class='chapter-number'>5</span>  <span class='chapter-title'><yrChapterNumber>5. </yrChapterNumber> Intro to Git & GitHub</span>"
    ]
  },
  {
    "objectID": "000240-v2-introToGit-v001.html#quick-reference-summary-of-commands",
    "href": "000240-v2-introToGit-v001.html#quick-reference-summary-of-commands",
    "title": "5  5.  Intro to Git & GitHub",
    "section": "5.18 Quick Reference: Summary of Commands",
    "text": "5.18 Quick Reference: Summary of Commands\n\n\n\n\n\n\n\n\nCommand\nWhat It Does\nExample\n\n\n\n\ngit init\nCreate a new repository\ngit init\n\n\ngit clone &lt;url&gt;\nDownload a repository\ngit clone https://github.com/user/repo.git\n\n\ngit status\nCheck status of your files\ngit status\n\n\ngit add &lt;file&gt;\nAdd files to staging area\ngit add README.md\n\n\ngit add .\nAdd all changes to staging\ngit add .\n\n\ngit commit -m \"msg\"\nCreate a commit\ngit commit -m \"Fix bug\"\n\n\ngit log\nView commit history\ngit log --oneline\n\n\ngit diff\nSee unstaged changes\ngit diff\n\n\ngit diff --staged\nSee staged changes\ngit diff --staged\n\n\ngit remote -v\nView remote connections\ngit remote -v\n\n\ngit remote add &lt;name&gt; &lt;url&gt;\nAdd a remote\ngit remote add origin &lt;url&gt;\n\n\ngit push &lt;remote&gt; &lt;branch&gt;\nSend commits to remote\ngit push origin main\n\n\ngit pull &lt;remote&gt; &lt;branch&gt;\nGet commits from remote\ngit pull origin main",
    "crumbs": [
      "Intro",
      "<span class='chapter-number'>5</span>  <span class='chapter-title'><yrChapterNumber>5. </yrChapterNumber> Intro to Git & GitHub</span>"
    ]
  },
  {
    "objectID": "000240-v2-introToGit-v001.html#best-practices",
    "href": "000240-v2-introToGit-v001.html#best-practices",
    "title": "5  5.  Intro to Git & GitHub",
    "section": "5.19 Best Practices",
    "text": "5.19 Best Practices\n\nCommit often! Make small, focused commits rather than huge ones. It’s easier to understand what changed.\nWrite good commit messages. Your future self will thank you.\nPull before you push. Always get the latest changes before sending yours.\nDon’t commit secrets! Never commit passwords, API keys, or sensitive data. Use .gitignore and environment variables.\nCheck git status constantly. It’s your best friend for understanding what’s going on.\nReview changes before committing. Use git diff to see exactly what you’re about to commit.",
    "crumbs": [
      "Intro",
      "<span class='chapter-number'>5</span>  <span class='chapter-title'><yrChapterNumber>5. </yrChapterNumber> Intro to Git & GitHub</span>"
    ]
  },
  {
    "objectID": "000240-v2-introToGit-v001.html#what-we-didnt-cover-yet",
    "href": "000240-v2-introToGit-v001.html#what-we-didnt-cover-yet",
    "title": "5  5.  Intro to Git & GitHub",
    "section": "5.20 What We Didn’t Cover (Yet!)",
    "text": "5.20 What We Didn’t Cover (Yet!)\nThere’s a lot more to Git, but these basics will get you very far! Topics for later:\n\nBranching and merging - Work on features in parallel\nStashing - Temporarily save work in progress\nReverting commits - Undo specific commits\nTagging - Mark important commits (like releases)\nRebasing - Advanced history management\nResolving conflicts - What to do when changes clash\n\nBut don’t worry about these now. Master the basics first!",
    "crumbs": [
      "Intro",
      "<span class='chapter-number'>5</span>  <span class='chapter-title'><yrChapterNumber>5. </yrChapterNumber> Intro to Git & GitHub</span>"
    ]
  },
  {
    "objectID": "000240-v2-introToGit-v001.html#next-steps",
    "href": "000240-v2-introToGit-v001.html#next-steps",
    "title": "5  5.  Intro to Git & GitHub",
    "section": "5.21 Next Steps",
    "text": "5.21 Next Steps\n\nPractice with the sample project! Try making changes, committing them, and viewing the history.\nCreate a GitHub account at github.com if you don’t have one.\nCreate a test repository on GitHub and practice pushing and pulling.\nUse Git for your real projects! The best way to learn is by using it daily.\nWhen you’re ready, learn about branching. It unlocks Git’s real power for collaboration.\n\nRemember: everyone struggles with Git at first. It gets easier with practice, and the concepts will eventually click. Keep at it!\nHappy vibe-coding! 🎉",
    "crumbs": [
      "Intro",
      "<span class='chapter-number'>5</span>  <span class='chapter-title'><yrChapterNumber>5. </yrChapterNumber> Intro to Git & GitHub</span>"
    ]
  },
  {
    "objectID": "000230-v1-introToGit-v001.html",
    "href": "000230-v1-introToGit-v001.html",
    "title": "6  6.  alternate chapter - Intro to Git & GitHub (hands-on, Bash-first)",
    "section": "",
    "text": "6.1 0) Setup",
    "crumbs": [
      "Intro",
      "<span class='chapter-number'>6</span>  <span class='chapter-title'><yrChapterNumber>6. </yrChapterNumber> alternate chapter - Intro to Git & GitHub (hands-on, Bash-first)</span>"
    ]
  },
  {
    "objectID": "000230-v1-introToGit-v001.html#setup",
    "href": "000230-v1-introToGit-v001.html#setup",
    "title": "6  6.  alternate chapter - Intro to Git & GitHub (hands-on, Bash-first)",
    "section": "",
    "text": "6.1.1 Install Git (includes Git Bash on Windows)\n\nWindows: Download “Git for Windows” from the official Git site and install. Choose Git Bash when prompted. Launch Git Bash after install.\nmacOS: xcode-select --install (then git --version) or install via Homebrew: brew install git.\nLinux: Use your distro’s package manager, e.g., sudo apt-get install git.\n\n\n\n6.1.2 Configure Git (one-time)\ngit --version\ngit config --global user.name \"Your Name\"\ngit config --global user.email \"you@example.com\"\ngit config --global init.defaultBranch main",
    "crumbs": [
      "Intro",
      "<span class='chapter-number'>6</span>  <span class='chapter-title'><yrChapterNumber>6. </yrChapterNumber> alternate chapter - Intro to Git & GitHub (hands-on, Bash-first)</span>"
    ]
  },
  {
    "objectID": "000230-v1-introToGit-v001.html#create-a-project-local-repo",
    "href": "000230-v1-introToGit-v001.html#create-a-project-local-repo",
    "title": "6  6.  alternate chapter - Intro to Git & GitHub (hands-on, Bash-first)",
    "section": "6.2 1) Create a project & local repo",
    "text": "6.2 1) Create a project & local repo\nmkdir hello-site   # create a new folder (i.e. \"directory\") named \"hello-site\"\ncd hello-site      # change the working directory to hello-site\ngit init           # prepare this folder for use with git\ngit status         # show the current status of the git repo\nFiles created so far\nhello-site/\n└─ .git/        # (hidden Git database)",
    "crumbs": [
      "Intro",
      "<span class='chapter-number'>6</span>  <span class='chapter-title'><yrChapterNumber>6. </yrChapterNumber> alternate chapter - Intro to Git & GitHub (hands-on, Bash-first)</span>"
    ]
  },
  {
    "objectID": "000230-v1-introToGit-v001.html#create-your-first-file-in-the-git-repository",
    "href": "000230-v1-introToGit-v001.html#create-your-first-file-in-the-git-repository",
    "title": "6  6.  alternate chapter - Intro to Git & GitHub (hands-on, Bash-first)",
    "section": "6.3 2) Create your first file in the git repository",
    "text": "6.3 2) Create your first file in the git repository",
    "crumbs": [
      "Intro",
      "<span class='chapter-number'>6</span>  <span class='chapter-title'><yrChapterNumber>6. </yrChapterNumber> alternate chapter - Intro to Git & GitHub (hands-on, Bash-first)</span>"
    ]
  },
  {
    "objectID": "000230-v1-introToGit-v001.html#a-text-files-vs-binary-files",
    "href": "000230-v1-introToGit-v001.html#a-text-files-vs-binary-files",
    "title": "6  6.  alternate chapter - Intro to Git & GitHub (hands-on, Bash-first)",
    "section": "6.4 2a) “text files” vs “binary files”",
    "text": "6.4 2a) “text files” vs “binary files”\nAll files stored on a computer can be categorized as one of the following:\n\nText files contain only “text” (i.e. letters, numbers, special characters such as !@#$%^&*()_+=-;’:“,./&lt;&gt;?) A text cannot contain any pictures, charts, colors, etc.\nBinary files may contain any of the above types of content.\n\nThere are two types of programs for typing text.\n\ntext editors - these are only able to create text files. They don’t have the ability to create pictures, colors, charts, etc.\nword processors - these are programs such as Microsoft Word, Pages (on Mac), Excel, or any program that can create anything other than just plain text\n\nComputer programs for just about all programming languages must be stored in text files and must be written using a text editor program.\nComputer programs should NOT be written with a word processor. This is because even if a word processor program is used to create a file that just contains text (and no pictures) the file is still stored in a binary file.\nTherefore when creating or editing any code files in your project make sure to use a text editor (not a word processor). The following come installed be default\n\nNotead (windows)\nTextEdit (mac) - Unfortunately TextEdit will not work as a “true” text editor unless you setup “plain text mode” in TextEdit. See below for how to do so:\n\n\n6.4.1 How to put TextEdit (on mac) in plain text mode:\n\nFor a document that’s already open:\nGo to the Format menu at the top of your screen Click Make Plain Text (or press Shift+Cmd+T)\n\n\nTo make plain text the default for new documents:\n\nOpen TextEdit\nGo to TextEdit menu &gt; Preferences (or press Cmd+,)\nIn the New Document tab, select Plain text instead of “Rich text”\nWhile you’re there, you might also want to uncheck “Smart quotes” and “Smart dashes” in the Options section, as these can cause issues with code\n\nOnce you do this, all new TextEdit documents will open in plain text mode by default, which is much better for writing code since it won’t add any hidden formatting characters. You’ll notice the difference immediately - in plain text mode, you won’t see font formatting options in the toolbar, and your text will appear in a monospace font (usually Monaco or Menlo), which is ideal for code.",
    "crumbs": [
      "Intro",
      "<span class='chapter-number'>6</span>  <span class='chapter-title'><yrChapterNumber>6. </yrChapterNumber> alternate chapter - Intro to Git & GitHub (hands-on, Bash-first)</span>"
    ]
  },
  {
    "objectID": "000230-v1-introToGit-v001.html#b-add-a-simple-html-page",
    "href": "000230-v1-introToGit-v001.html#b-add-a-simple-html-page",
    "title": "6  6.  alternate chapter - Intro to Git & GitHub (hands-on, Bash-first)",
    "section": "6.5 2b) Add a simple HTML page",
    "text": "6.5 2b) Add a simple HTML page\nWebsites are created using many different programming languages and technologies. Technologies used to implement websites range from simple websites that use just HTML, CSS and JavaScript, to very complex websites that incorporate many other technologies. However, almost every website has a collection of the following 3 types of files\n\nHTML files (usually end with .html)\nThese files contain the text of what is displayed on the website. Note that more complex websites often use techniques that generate a lof of the text for the website with other techniques.\nCSS files (usually end with .css)\nThese files contain the instructions for the “styling” of the website - such as colors and fonts for different sections of the website.\nJavaScript files (usually end with .js)\nThese files contain code that can make a website more interactive and reactive to user input.\n\nWe will create our first code file, index.html below. To create the file we can use one of the following two techniques:\n\n6.5.1 Using a text editor to create our first code file\nWe want to create a file named index.html that contains the HTML code shown below. To do so you can create the file in a text editor such as Notepad (on Windows) or TextEdit ( in “plain text” mode - see above) on Mac. Make sure to save the file in the folder that you created above. To see the name of the folder where you should save the file you can type the Bash command pwd (pwd stands for Print Working Direcotry).\n&lt;!doctype html&gt;\n&lt;html&gt;\n  &lt;head&gt;\n    &lt;meta charset=\"utf-8\"&gt;\n    &lt;title&gt;Hello Site&lt;/title&gt;\n  &lt;/head&gt;\n  &lt;body&gt;\n    &lt;h1&gt;Hello, Git!&lt;/h1&gt;\n    &lt;p&gt;This is my first version.&lt;/p&gt;\n  &lt;/body&gt;\n&lt;/html&gt;\n\n\n6.5.2 ALTERNATIVE - use a bash command to create the file\nAlternatively you can use the long command shown below in Bash directly to create the file.\nThings to pay attention to:\n\nThe comamnd starts with the line cat &lt;&lt; EOF &gt; index.html.\nThe name of the file you are creating is specified after the &gt; sign. In this case, the name of the file is index.html.\nThe command ends with a line simply says EOF (no spaces before or after). The letters EOF stand for “End Of File”. Note that you can replace EOF on the first and last lines with any unique set of\nThe contents of the file you want to create is placed between the first line (i.e. cat ...) and the last line (i.e. EOF).\n\nThis technique can be used to create any text file you like.\ncat &lt;&lt; EOF &gt; index.html\n&lt;!doctype html&gt;\n&lt;html&gt;\n  &lt;head&gt;\n    &lt;meta charset=\"utf-8\"&gt;\n    &lt;title&gt;Hello Site&lt;/title&gt;\n  &lt;/head&gt;\n  &lt;body&gt;\n    &lt;h1&gt;Hello, Git!&lt;/h1&gt;\n    &lt;p&gt;This is my first version.&lt;/p&gt;\n  &lt;/body&gt;\n&lt;/html&gt;\nEOF\nThis technique is usefol for creating new files but is not useful when you want to edit an existing file. To do that the simplest thing to do is to use a text eidtor and described above.",
    "crumbs": [
      "Intro",
      "<span class='chapter-number'>6</span>  <span class='chapter-title'><yrChapterNumber>6. </yrChapterNumber> alternate chapter - Intro to Git & GitHub (hands-on, Bash-first)</span>"
    ]
  },
  {
    "objectID": "000230-v1-introToGit-v001.html#c-commit-the-index.html-file-to-the-git-repository",
    "href": "000230-v1-introToGit-v001.html#c-commit-the-index.html-file-to-the-git-repository",
    "title": "6  6.  alternate chapter - Intro to Git & GitHub (hands-on, Bash-first)",
    "section": "6.6 2c) Commit the index.html file to the git repository:",
    "text": "6.6 2c) Commit the index.html file to the git repository:\ngit add index.html\ngit commit -m \"Add basic index.html\"",
    "crumbs": [
      "Intro",
      "<span class='chapter-number'>6</span>  <span class='chapter-title'><yrChapterNumber>6. </yrChapterNumber> alternate chapter - Intro to Git & GitHub (hands-on, Bash-first)</span>"
    ]
  },
  {
    "objectID": "000230-v1-introToGit-v001.html#add-css",
    "href": "000230-v1-introToGit-v001.html#add-css",
    "title": "6  6.  alternate chapter - Intro to Git & GitHub (hands-on, Bash-first)",
    "section": "6.7 3) Add CSS",
    "text": "6.7 3) Add CSS\nFULL FILE CONTENT BELOW — style.css\nbody { font-family: Arial, sans-serif; }\nh1   { text-align: center; }\np    { color: #333; }\nLink it in index.html (inside &lt;head&gt;):\n&lt;link rel=\"stylesheet\" href=\"style.css\"&gt;\nCommit:\ngit add style.css index.html\ngit commit -m \"Add basic styles and link CSS\"",
    "crumbs": [
      "Intro",
      "<span class='chapter-number'>6</span>  <span class='chapter-title'><yrChapterNumber>6. </yrChapterNumber> alternate chapter - Intro to Git & GitHub (hands-on, Bash-first)</span>"
    ]
  },
  {
    "objectID": "000230-v1-introToGit-v001.html#add-javascript",
    "href": "000230-v1-introToGit-v001.html#add-javascript",
    "title": "6  6.  alternate chapter - Intro to Git & GitHub (hands-on, Bash-first)",
    "section": "6.8 4) Add JavaScript",
    "text": "6.8 4) Add JavaScript\nFULL FILE CONTENT BELOW — app.js\ndocument.addEventListener('DOMContentLoaded', () =&gt; {\n  console.log('Site loaded');\n  const p = document.querySelector('p');\n  p.textContent += ' (Now with JavaScript!)';\n});\nLink it in index.html before &lt;/body&gt;:\n&lt;script src=\"app.js\"&gt;&lt;/script&gt;\nCommit:\ngit add app.js index.html\ngit commit -m \"Add simple JS to modify page text\"",
    "crumbs": [
      "Intro",
      "<span class='chapter-number'>6</span>  <span class='chapter-title'><yrChapterNumber>6. </yrChapterNumber> alternate chapter - Intro to Git & GitHub (hands-on, Bash-first)</span>"
    ]
  },
  {
    "objectID": "000230-v1-introToGit-v001.html#review-with-status-log",
    "href": "000230-v1-introToGit-v001.html#review-with-status-log",
    "title": "6  6.  alternate chapter - Intro to Git & GitHub (hands-on, Bash-first)",
    "section": "6.9 5) Review with status & log",
    "text": "6.9 5) Review with status & log\n\nCheck changes:\ngit status\nSee history:\ngit log --oneline --graph --decorate --all",
    "crumbs": [
      "Intro",
      "<span class='chapter-number'>6</span>  <span class='chapter-title'><yrChapterNumber>6. </yrChapterNumber> alternate chapter - Intro to Git & GitHub (hands-on, Bash-first)</span>"
    ]
  },
  {
    "objectID": "000230-v1-introToGit-v001.html#publish-to-github",
    "href": "000230-v1-introToGit-v001.html#publish-to-github",
    "title": "6  6.  alternate chapter - Intro to Git & GitHub (hands-on, Bash-first)",
    "section": "6.10 6) Publish to GitHub",
    "text": "6.10 6) Publish to GitHub\n\n6.10.1 Step 1 — Create an empty GitHub repo\n\nOn GitHub: New → Repository\nName it hello-site\nLeave empty (no README/license)\nCopy the repo URL\n\nChoose HTTPS (PAT) or SSH.\n\n\n\n6.10.2 Option A — HTTPS + Personal Access Token (PAT)\n\nGenerate PAT:\n\nGitHub → Settings → Developer settings → Personal access tokens → Tokens (classic)\nNew token with repo scope\n\nAdd remote & push:\ngit remote add origin https://github.com/yourname/hello-site.git\ngit push -u origin main\n\nUsername → GitHub username\nPassword → paste PAT\n\nLater:\ngit push\n\n\n\n\n6.10.3 Option B — SSH Keys\n\nGenerate:\nssh-keygen -t ed25519 -C \"you@example.com\"\nAdd to agent:\neval \"$(ssh-agent -s)\"\nssh-add ~/.ssh/id_ed25519\nCopy to GitHub:\ncat ~/.ssh/id_ed25519.pub\nAdd via Settings → SSH and GPG keys.\nTest:\nssh -T git@github.com\nAdd remote & push:\ngit remote add origin git@github.com:yourname/hello-site.git\ngit push -u origin main\n\n\n\n\n6.10.4 Which method?\n\nPAT (HTTPS): simplest start\nSSH: convenient long-term",
    "crumbs": [
      "Intro",
      "<span class='chapter-number'>6</span>  <span class='chapter-title'><yrChapterNumber>6. </yrChapterNumber> alternate chapter - Intro to Git & GitHub (hands-on, Bash-first)</span>"
    ]
  },
  {
    "objectID": "000230-v1-introToGit-v001.html#daily-workflow-recap",
    "href": "000230-v1-introToGit-v001.html#daily-workflow-recap",
    "title": "6  6.  alternate chapter - Intro to Git & GitHub (hands-on, Bash-first)",
    "section": "6.11 7) Daily workflow recap",
    "text": "6.11 7) Daily workflow recap\n\nStage & commit:\ngit add &lt;file&gt;\ngit commit -m \"Message\"\nInspect:\ngit status\ngit log --oneline\nPublish:\ngit push",
    "crumbs": [
      "Intro",
      "<span class='chapter-number'>6</span>  <span class='chapter-title'><yrChapterNumber>6. </yrChapterNumber> alternate chapter - Intro to Git & GitHub (hands-on, Bash-first)</span>"
    ]
  },
  {
    "objectID": "000230-v1-introToGit-v001.html#bonus-practice",
    "href": "000230-v1-introToGit-v001.html#bonus-practice",
    "title": "6  6.  alternate chapter - Intro to Git & GitHub (hands-on, Bash-first)",
    "section": "6.12 8) Bonus practice",
    "text": "6.12 8) Bonus practice\nFULL FILE CONTENT BELOW — .gitignore\n# OS/editor clutter\n.DS_Store\n*.log\nnode_modules/\nCommit it:\ngit add .gitignore\ngit commit -m \"Add .gitignore for common clutter\"\ngit push",
    "crumbs": [
      "Intro",
      "<span class='chapter-number'>6</span>  <span class='chapter-title'><yrChapterNumber>6. </yrChapterNumber> alternate chapter - Intro to Git & GitHub (hands-on, Bash-first)</span>"
    ]
  },
  {
    "objectID": "000230-v1-introToGit-v001.html#cloning-pulling",
    "href": "000230-v1-introToGit-v001.html#cloning-pulling",
    "title": "6  6.  alternate chapter - Intro to Git & GitHub (hands-on, Bash-first)",
    "section": "6.13 9) Cloning & pulling",
    "text": "6.13 9) Cloning & pulling\n\n6.13.1 Clone a repo\nInstead of starting from scratch, you can copy a repo:\ngit clone https://github.com/yourname/hello-site.git\n# or with SSH\ngit clone git@github.com:yourname/hello-site.git\nThis creates a new folder with all files and history.\n\n\n6.13.2 Make changes & push\n\nEnter the folder:\ncd hello-site\nChange a file, commit, and push as before:\ngit add index.html\ngit commit -m \"Edit homepage\"\ngit push\n\n\n\n6.13.3 Pull changes from GitHub\nIf changes were made on GitHub (or another machine), bring them in:\ngit pull",
    "crumbs": [
      "Intro",
      "<span class='chapter-number'>6</span>  <span class='chapter-title'><yrChapterNumber>6. </yrChapterNumber> alternate chapter - Intro to Git & GitHub (hands-on, Bash-first)</span>"
    ]
  },
  {
    "objectID": "000230-v1-introToGit-v001.html#final-project-tree",
    "href": "000230-v1-introToGit-v001.html#final-project-tree",
    "title": "6  6.  alternate chapter - Intro to Git & GitHub (hands-on, Bash-first)",
    "section": "6.14 Final Project Tree",
    "text": "6.14 Final Project Tree\nhello-site/\n├─ index.html\n├─ style.css\n├─ app.js\n├─ .gitignore\n└─ .git/\n\n✅ You now know: - How to set up a local repo - How to commit changes and see history - How to connect to GitHub (HTTPS or SSH) - How to push changes - How to clone repos and pull updates",
    "crumbs": [
      "Intro",
      "<span class='chapter-number'>6</span>  <span class='chapter-title'><yrChapterNumber>6. </yrChapterNumber> alternate chapter - Intro to Git & GitHub (hands-on, Bash-first)</span>"
    ]
  },
  {
    "objectID": "000900-internetArchitecture-browsersAndWebservers-v001.html",
    "href": "000900-internetArchitecture-browsersAndWebservers-v001.html",
    "title": "7  7.  Browsers (HTML,CSS,Javascript) and Web Servers",
    "section": "",
    "text": "7.1 Browsers and Web Servers\nEvery website works in the following way: The website is “running” on a computer somewhere on the Intenet. The computer that is “running the website” is known as a “server computer”. There is a program known as the “web server program” running on the “server computer”.\nWhenever you navigate to a website, your browser is having a conversation with the “web server program” that is running on the “web server computer” for the website. The browser asks to see the webpage and the “web server program” responds to the browser with the contents of the webpage being requested.",
    "crumbs": [
      "Basic Internet Architecture",
      "<span class='chapter-number'>7</span>  <span class='chapter-title'><yrChapterNumber>7. </yrChapterNumber> Browsers (HTML,CSS,Javascript) and Web Servers</span>"
    ]
  },
  {
    "objectID": "000900-internetArchitecture-browsersAndWebservers-v001.html#small-websites-vs-large-websites",
    "href": "000900-internetArchitecture-browsersAndWebservers-v001.html#small-websites-vs-large-websites",
    "title": "7  7.  Browsers (HTML,CSS,Javascript) and Web Servers",
    "section": "7.2 Small websites vs Large websites",
    "text": "7.2 Small websites vs Large websites\nConceptually we can understand how websites work by thinking of a website being “run” on a single web server program that is running on a single computer on the Internet. For smaller websites this often is the case. However, larger websites that have many users - e.g. google, amazon,etc - could not possibly be handled by a single web server program running on a single computer. Such websites might be running on hundreds or thousands of “web server computers”. However, to understand how websites work, it is sufficient to focus on how a website with a single server computer works. Larger websites use technical “tricks” to make their multiple server computers appear to the user’s browser as though the multiple computers were actually a single computer. We will ignore those details.\nEvery website works in the following way: The user’s browser has a conversation with the “web server program” that is running somewhere on the Internet. The user’s browser sends messages to the web server program and the web server program responds to the browser with information that the browser needs to display the webpage on the user’s computer.",
    "crumbs": [
      "Basic Internet Architecture",
      "<span class='chapter-number'>7</span>  <span class='chapter-title'><yrChapterNumber>7. </yrChapterNumber> Browsers (HTML,CSS,Javascript) and Web Servers</span>"
    ]
  },
  {
    "objectID": "000900-internetArchitecture-browsersAndWebservers-v001.html#frontend-vs-backend---client-vs-server",
    "href": "000900-internetArchitecture-browsersAndWebservers-v001.html#frontend-vs-backend---client-vs-server",
    "title": "7  7.  Browsers (HTML,CSS,Javascript) and Web Servers",
    "section": "7.3 Frontend vs Backend - Client vs Server",
    "text": "7.3 Frontend vs Backend - Client vs Server\nThere are different terms that are often used that mean the same or similar things. It is important to be familiar with the following terminology:\nThe browser and web server are often referred to in the following way:\n\nThe browser is often called the “frontend” of the website.\nThe server is often called the “backend” of the website.\n\nAlternatively,\n\nThe browser is called a “client” or a “client program”.\nThe web server computer is known simply as a “server” or a “server computer”.\nThe web server program that is running on the web server computer can also be referred to as simply a “server” or as a “server program”.",
    "crumbs": [
      "Basic Internet Architecture",
      "<span class='chapter-number'>7</span>  <span class='chapter-title'><yrChapterNumber>7. </yrChapterNumber> Browsers (HTML,CSS,Javascript) and Web Servers</span>"
    ]
  },
  {
    "objectID": "000900-internetArchitecture-browsersAndWebservers-v001.html#html-css-and-javascript",
    "href": "000900-internetArchitecture-browsersAndWebservers-v001.html#html-css-and-javascript",
    "title": "7  7.  Browsers (HTML,CSS,Javascript) and Web Servers",
    "section": "7.4 HTML, CSS and JavaScript",
    "text": "7.4 HTML, CSS and JavaScript\nThe only thing that web browsers understand are HTML, CSS and Javascript. Therefore in response for the browser asking the web server program for the contents of a webpage, the web server program responds by sending the browser computer code. The computer code that is sent back to the browser is a combination of the following three different computer languages:\n\nHTML\nCSS (Cascading Style Sheets)\nJavaScript\n\nAt the very basic level the following are the roles of each of these languages.\n\nHTML contains the actual words that will appear on the webpage and how they are structured - e.g. what text is a header, what text should be arranged in lists or in tables, etc.\nCSS (Cascading Style Sheets) - is a language that contains instructions that describe the “look and feel” of the page - e.g. what colors, fonts, etc should be used.\nJavaScript is a language that describes actions that should happen on the page - e.g. popup windows that appear when a user clicks on something, buttons changing color when a user hovers his mouse over the button, etc.\n\nIn reality, the above list does not capture the whole picture. For example JavaScript can do a LOT of things - including changing the text that appears on the page (which is normally the job of HTML). There are other complications, however, it is enough to understand the list above to get the general idea of what a browser does.",
    "crumbs": [
      "Basic Internet Architecture",
      "<span class='chapter-number'>7</span>  <span class='chapter-title'><yrChapterNumber>7. </yrChapterNumber> Browsers (HTML,CSS,Javascript) and Web Servers</span>"
    ]
  },
  {
    "objectID": "000900-internetArchitecture-browsersAndWebservers-v001.html#how-to-see-the-html-css-javascript-for-a-webpage",
    "href": "000900-internetArchitecture-browsersAndWebservers-v001.html#how-to-see-the-html-css-javascript-for-a-webpage",
    "title": "7  7.  Browsers (HTML,CSS,Javascript) and Web Servers",
    "section": "7.5 How to see the HTML, CSS, Javascript for a webpage",
    "text": "7.5 How to see the HTML, CSS, Javascript for a webpage\nAll browsers have a feature that allows you to see the HTML, CSS and Javascript that define the webpage you’re viewing.\n\n7.5.1 View Source\nOn most (or all) browsers if you right-click on a blank area of the webpage you should see a option entitled view page source (or something similar). Clicking on this option opens up a new tab that shows the HTML (and possibly CSS and Javascript) for the entire webpage you are viewing.\n\n\n7.5.2 Inspect\nAlternatively you can right-click on any part of a webpage and choose the inspect option. This opens up a portion of the browser window that shows a lot of tools that web developers can use to help them figure out what is going wrong with a webpage. The Elements tab of the developer tools shows the HTML (and possibly Javascript/CSS) for the page. The contents are zoomed to the specific lines of code in the HTML that corresponds to the exact location of the page that you right-clicked on.\nFor example, the following shows the “developer tools” that show up when I right clicked on the picture of the dishsoap in the following amazon.com webpage:",
    "crumbs": [
      "Basic Internet Architecture",
      "<span class='chapter-number'>7</span>  <span class='chapter-title'><yrChapterNumber>7. </yrChapterNumber> Browsers (HTML,CSS,Javascript) and Web Servers</span>"
    ]
  },
  {
    "objectID": "000940-internetArchitecture-domainNamesEtc-v001.html",
    "href": "000940-internetArchitecture-domainNamesEtc-v001.html",
    "title": "8  8.  Domain Names, IP Addresses, ping, etc",
    "section": "",
    "text": "Every web server computer on the Internet has a distinct “name”. When the browser sends a message to the web server program it does so by specifying it’s name. You can think of the “domain name” of a website (e.g. google.com, amazon.com, etc) as the “name” of the web server computer that is running the website.\n\nREMEMBER that we said that even though large websites such as google are actually running on multiple computers - however, we can conceptually understand how everything works by imagining that they actually run on just a single computer.\n\nThe domain name in a URL simply identifies which computer on the Internet, the browser need to contact to get the desired webpage. For example, the follwing URL goes to a page on amazon’s website for toys: https://www.amazon.com/toys/b?ie=UTF8&node=165793011 This URL has a lot in it. The part that says www.amazon.com is the “name” of the computer that runs amazon’s website. The rest of the URL has other significance that we will not discuss now (maybe later …)\n\n8.0.1 IP addresses\nIn reality the “domain name” of the computer is converted into the computer version of a telephone number - called an IP address. An IP address looks like a few numbers separated by periods (see below). The browser actually looks up the IP address for the domain name and uses that to contact the web server computer. (For now let’s ignore “how” the browser looks up the IP address for a particular domain name - just know that it does and uses the IP address to “call up” the server computer).\nYou can see the ip address for www.amazon.com by using the ping program on your Bash “command line”. The ping program sends a message to the computer asking it to respond. The computer simply responds with a very short message to indicate that it is “alive” and not “down”. The ping program simply reports that the computer responded. The ping program also reports the IP address of the computer that responded.\nSimply type the following command\nping www.amazon.com\nThe response will look similar to this (your response might look a little different). On some computers the output stops after a few lines of this. On other computers you can press ctrl-c to stop the output if it keeps going.\nPING d3ag4hukkh62yn.cloudfront.net (54.192.52.164) 56(84) bytes of data.\n64 bytes from server-54-192-52-164.ord53.r.cloudfront.net (54.192.52.164): icmp_seq=1 ttl=245 time=307 ms\n64 bytes from server-54-192-52-164.ord53.r.cloudfront.net (54.192.52.164): icmp_seq=2 ttl=245 time=20.1 ms\n64 bytes from server-54-192-52-164.ord53.r.cloudfront.net (54.192.52.164): icmp_seq=3 ttl=245 time=14.7 ms\n64 bytes from server-54-192-52-164.ord53.r.cloudfront.net (54.192.52.164): icmp_seq=4 ttl=245 time=15.8 ms\n64 bytes from server-54-192-52-164.ord53.r.cloudfront.net (54.192.52.164): icmp_seq=5 ttl=245 time=13.6 ms\n64 bytes from server-54-192-52-164.ord53.r.cloudfront.net (54.192.52.164): icmp_seq=6 ttl=245 time=21.6 ms\n64 bytes from server-54-192-52-164.ord53.r.cloudfront.net (54.192.52.164): icmp_seq=7 ttl=245 time=12.2 ms\n... etc\nThe response above, simply means that the server computer is up and running and responding. This whole thing is similar to the ping program calling out to the server computer asking hey are you alive? and the server computer responding yes, yes, yes, yes ... etc. The IP address for the server computer in the above example is 54.192.52.164.",
    "crumbs": [
      "Basic Internet Architecture",
      "<span class='chapter-number'>8</span>  <span class='chapter-title'><yrChapterNumber>8. </yrChapterNumber> Domain Names, IP Addresses, ping, etc</span>"
    ]
  },
  {
    "objectID": "000950-internetArchitecture-webFrameworks-v001.html",
    "href": "000950-internetArchitecture-webFrameworks-v001.html",
    "title": "9  9.  Client side web frameworks",
    "section": "",
    "text": "9.1 Client side frameworks\nAs we said earler, HTML, CSS and JavaScript are the languages that specify to the browser what should be displayed. (see previous chapter for more info).\nIn the early days of web, software developers would write the HTML, CSS and Javascript code. They would then place the files that contain the code on the server computer. The server would then send those files to the browser and the browser would display the files.\nYou could theoretically create a website by just writing code in HTML, CSS and Javascript. However, modern websites have become very complicated to create. A “framework” is a language/software-program that makes it easier for software developer to create programs or websites. The framework usually introduces another language that the software developer uses to create the website. The framework language in turn generates the detailed HTML, CSS, Javascript that is actually used by the browser.\nThere are many different “client side frameworks” that work in this way. Some of the more popular ones are:",
    "crumbs": [
      "Basic Internet Architecture",
      "<span class='chapter-number'>9</span>  <span class='chapter-title'><yrChapterNumber>9. </yrChapterNumber> Client side web frameworks</span>"
    ]
  },
  {
    "objectID": "000950-internetArchitecture-webFrameworks-v001.html#client-side-frameworks",
    "href": "000950-internetArchitecture-webFrameworks-v001.html#client-side-frameworks",
    "title": "9  9.  Client side web frameworks",
    "section": "",
    "text": "ReactJS\nVueJS\nAngular\nSvelte\netc.",
    "crumbs": [
      "Basic Internet Architecture",
      "<span class='chapter-number'>9</span>  <span class='chapter-title'><yrChapterNumber>9. </yrChapterNumber> Client side web frameworks</span>"
    ]
  },
  {
    "objectID": "000950-internetArchitecture-webFrameworks-v001.html#meta-frameworks",
    "href": "000950-internetArchitecture-webFrameworks-v001.html#meta-frameworks",
    "title": "9  9.  Client side web frameworks",
    "section": "9.2 “meta” frameworks",
    "text": "9.2 “meta” frameworks\nCoding websites keeps growing in complexity. The frameworks were initially intended to make it easier in that web developers would not have to code the HTML, CSS and Javascript themselves. The more compact framework languages would generate the HTML, CSS and Javascript.\nToday “meta” frameworks have been introduced to the web development world. These “meta frameworks” introduce yet new programming language rules and constructs which again make it more concise to write the code for a website.\nThese “meta frameworks” are similar to frameworks in that the code written for the meta frameworks generate the code for the underlying framework. In turn the generated framework code automatically generates the underlying HTML, CSS and Javascript that is sent to the browser.\nFor example:\n\nNextJS is a “meta framework” that is built on top of the “React” framework.\nNuxtJS (with a “u”) is a “meta framework” that is built on top of the “VueJS” framework.\n\nThey combine client-side rendering (CSR) with server-side rendering (SSR) and static site generation (SSG), so they’re considered full-stack or hybrid frameworks.",
    "crumbs": [
      "Basic Internet Architecture",
      "<span class='chapter-number'>9</span>  <span class='chapter-title'><yrChapterNumber>9. </yrChapterNumber> Client side web frameworks</span>"
    ]
  },
  {
    "objectID": "001000-tutorial-supabase-nextjs-v001.html",
    "href": "001000-tutorial-supabase-nextjs-v001.html",
    "title": "10  10.  Tutorial - intro",
    "section": "",
    "text": "10.1 Code is provided - setup and integration is the hard part\nMaterial for this section is based on the following video:\nThe video gives a tutorial of how to build a full web app that has all of the following features and technology\nThe video mentions a lot that you might not be familiar with. Don’t worry, this website will walk you through the harder parts and explain many concepts along the way that the video does not explain.\nThe code is free for you to download and clone from GitHub here: https://github.com/pixegami/task-app (see the next section for how to do that).\nThe harder parts here are to understand\nThe goal is that once you understand the architecture of this project and setup the project online, you can use AI to create your own projects. You can use the AI to generate code, but it is important to udnerstand how the whole project is architected so that you know how to speak with the AI.",
    "crumbs": [
      "Building with Next and Supabase",
      "<span class='chapter-number'>10</span>  <span class='chapter-title'><yrChapterNumber>10. </yrChapterNumber> Tutorial - intro</span>"
    ]
  },
  {
    "objectID": "001000-tutorial-supabase-nextjs-v001.html#code-is-provided---setup-and-integration-is-the-hard-part",
    "href": "001000-tutorial-supabase-nextjs-v001.html#code-is-provided---setup-and-integration-is-the-hard-part",
    "title": "10  10.  Tutorial - intro",
    "section": "",
    "text": "The architecture of the whole project and what different parts of the code are used for.\nHow to get this type of project running online. This includes creating accounts with Vercel (for web hosting), Supabase (for database server and other features - see above)",
    "crumbs": [
      "Building with Next and Supabase",
      "<span class='chapter-number'>10</span>  <span class='chapter-title'><yrChapterNumber>10. </yrChapterNumber> Tutorial - intro</span>"
    ]
  },
  {
    "objectID": "001000-tutorial-supabase-nextjs-v001.html#links-from-the-youtube-video",
    "href": "001000-tutorial-supabase-nextjs-v001.html#links-from-the-youtube-video",
    "title": "10  10.  Tutorial - intro",
    "section": "10.2 🔗 Links from the youtube video",
    "text": "10.2 🔗 Links from the youtube video\n\nProject Code: https://github.com/pixegami/task-app\nSupabase: https://supabase.com\nGoogle Cloud: https://console.cloud.google.com\nOpenAI: https://platform.openai.com\nStripe: https://stripe.com",
    "crumbs": [
      "Building with Next and Supabase",
      "<span class='chapter-number'>10</span>  <span class='chapter-title'><yrChapterNumber>10. </yrChapterNumber> Tutorial - intro</span>"
    ]
  },
  {
    "objectID": "001000-tutorial-supabase-nextjs-v001.html#chapters-in-the-video",
    "href": "001000-tutorial-supabase-nextjs-v001.html#chapters-in-the-video",
    "title": "10  10.  Tutorial - intro",
    "section": "10.3 📚 Chapters in the video",
    "text": "10.3 📚 Chapters in the video\n\n00:00 Introduction\n00:19 Demo\n02:19 Supabase Project Overview\n05:11 Setting Up\n08:03 Create Supabase Project\n10:10 Supabase CLI\n11:54 Google OAuth\n14:38 OpenAI API Key\n15:32 Stripe Integration\n22:12 Add Database\n27:28 Add Storage\n28:49 Deploy Edge Functions\n32:15 Run the Project\n34:03 Run Integration Tests\n35:02 Wrapping Up",
    "crumbs": [
      "Building with Next and Supabase",
      "<span class='chapter-number'>10</span>  <span class='chapter-title'><yrChapterNumber>10. </yrChapterNumber> Tutorial - intro</span>"
    ]
  },
  {
    "objectID": "001000-tutorial-supabase-nextjs-v001.html#overview",
    "href": "001000-tutorial-supabase-nextjs-v001.html#overview",
    "title": "10  10.  Tutorial - intro",
    "section": "10.4 Overview",
    "text": "10.4 Overview\nThis tutorial will guide you through setting up a complete full-stack SaaS application using Next.js and Supabase. By the end, you’ll have a task management application with authentication, AI features, image uploads, and payment processing.\n\n10.4.1 What You’ll Build\nA “task management” application (i.e. a “todo app”) with the following features:\n\nUser authentication (including Google OAuth)\nTask creation and editing\nAutomatic AI-powered task labeling\nImage attachments for tasks\nUser profiles with task statistics\nMonthly subscription plans with Stripe payments\n\nThe video assumes knowledge of things that you might not be familiar with. Don’t worry, this website will walk you through the harder parts and explain many concepts along the way that the video does not explain.",
    "crumbs": [
      "Building with Next and Supabase",
      "<span class='chapter-number'>10</span>  <span class='chapter-title'><yrChapterNumber>10. </yrChapterNumber> Tutorial - intro</span>"
    ]
  },
  {
    "objectID": "001000-tutorial-supabase-nextjs-v001.html#video-transcript-with-clickable-timestamps",
    "href": "001000-tutorial-supabase-nextjs-v001.html#video-transcript-with-clickable-timestamps",
    "title": "10  10.  Tutorial - intro",
    "section": "10.5 Video Transcript (with clickable timestamps)",
    "text": "10.5 Video Transcript (with clickable timestamps)\n\n\n\n\n\n\n\n\nTimestamp\nQuote\n\n\n\n\n0:00\nIn this video, I’m going to walk you through how to set up a full stack SaaS application using NextJS and Supabase.\n\n\n0:07\nI designed this project to be a complete overview of Supabase and an ideal starting point\n\n\n0:13\nfor anyone who wants to build and launch a SaaS application as quickly as possible.\n\n\n0:19\nHere’s a quick demo of the finished product. It’s going to be a task management application. First, you’ll have to log in.\n\n\n0:27\nAnd then on the dashboard, you can see all the tasks you’ve\n\n\n0:32\ncreated. And you can click here to create a new task. It also has a special AI feature to assign a label\n\n\n0:40\nautomatically, depending on the task description. Once you’ve created a task, you can also click to go in\n\n\n0:48\nand edit it. You can change the label, change any of the fields, and you can also upload an image to it.\n\n\n0:57\nThe app also has authentication, so when you log in, you can only see your own task. And you can go to your profile\n\n\n1:04\nand you can see how many tasks you’ve created. There’s also a monthly subscription that you\n\n\n1:09\ncan use to upgrade your account. And the payments are implemented with Stripe, so if a user\n\n\n1:15\nis signed up, they can click on this page to update or to cancel their subscription. As you can see, it’s quite a simple project, but it\n\n\n1:23\nuses all the fundamental building blocks that nearly every single SaaS application will need to have.\n\n\n1:29\nThings like authentication, compute, and data storage. We will need to use a tech stack that will let us do all of those things.\n\n\n1:36\nThere’s actually quite a few viable options here. I ended up going with NextJS and Supabase. I like the feature\n\n\n1:42\nset that it offers, and I think that it strikes a good balance between simplicity and capability.\n\n\n1:49\nThe GitHub link for this entire project will be available in the video description. You can go there\n\n\n1:54\nto browse the code or to clone the entire project. Now, this video isn’t exactly a coding tutorial, because each\n\n\n2:00\nof the features here could probably be its own video. Instead, I’m going to focus on helping you understand\n\n\n2:06\nhow all of the pieces fit together, and I’m going to show you how to set up this project on your own machine, so that you can\n\n\n2:13\nstart building things with it right away. By the end of this video, you’ll have a good understanding\n\n\n2:19\nof how Supabase works, you’ll learn four of its core features, and you’ll also have the\n\n\n2:25\nactual project up and running on your machine. I’ve prepared this video assuming that you’re at\n\n\n2:31\nleast a mid-level developer, and here are some of the technologies we’ll be working with. If you aren’t familiar with them, then I’ll still\n\n\n2:38\ntry to make it as accessible as I can, but it just might be a little bit hard to follow. First, let’s start with a high-level overview of the whole project.\n\n\n2:46\nThese are the features that we want our app to have. They include task management, image attachments, automatic\n\n\n2:53\nAI labeling for our tasks, and the ability to sell premium subscription plans to our users.\n\n\n2:59\nIt’s a pretty standard set of features for an app, but the reason I chose these is that behind\n\n\n3:04\neach of these features, there’s a really important concept that I want to show you. So, having them all in one project is a great way\n\n\n3:12\nto learn how to apply all of them at once. Now, let’s take a quick look at the architecture\n\n\n3:18\nfor this project. Here is a simplified diagram. For the backend, we’ll be using Supabase. Supabase describes itself as an open-source Firebase alternative,\n\n\n3:27\nand if you don’t know what that is, you can sort of think of it as a lightweight cloud platform.\n\n\n3:33\nIt gives us almost everything we need for this app right out of the box and in one place. The database is going to be a PostgreSQL database,\n\n\n3:41\nand the storage system is pretty similar to something like Amazon S3 or Firestore.\n\n\n3:47\nFor our backend compute, we can also create edge functions using TypeScript. And there’s also an inbuilt authentication system that\n\n\n3:54\nintegrates really well with all of these features, but also with third-party providers like Google, OAuth.\n\n\n4:00\nThe front end is going to be a fully static NextJS app. You’ll have a client library that will talk to Supabase directly.\n\n\n4:07\nOn top of that, we will also need a couple of third-party services to round out our feature set.\n\n\n4:13\nWe will need a Google Cloud account if we want users to be able to sign in with Google. For our backend feature, we can actually use any LLM here.\n\n\n4:21\nAnd I’m just going to use OpenAI. And finally, we’ll use Stripe for our payments system. Now, how does this all get hosted, and how much will it cost?\n\n\n4:30\nWell, you basically have a few different options with Supabase. The easiest option is to use their cloud service.\n\n\n4:37\nThis is really simple to set up, and it’s probably the best option if you want to get started as soon as possible. It comes with a free tier, which works perfectly fine for this project.\n\n\n4:46\nAnd in fact, that is what we’ll be using. The next tier up is $25 a month, and it gives you a lot more of everything.\n\n\n4:53\nThat being said, Supabase is also completely open source. So another option is that you can host it yourself\n\n\n5:00\nor deploy it to a cloud provider like AWS or GCP. But I think that’s going to be quite complex to manage,\n\n\n5:06\nand I don’t really recommend doing that. It’s just good to know that it is an option. Okay, so now that we’ve gone over all the high-level stuff, let’s\n\n\n5:14\nlook at our plan for how we’re going to set up the project. We will need to set up five separate things to get this all working.\n\n\n5:20\nWe’ll start by just downloading the code from GitHub and then creating a project on the Supabase cloud.\n\n\n5:26\nThen we’ll go and set up the rest of the dependencies first. Google OAuth, OpenAI, and Stripe.\n\n\n5:32\nAnd then we’ll have all the API keys we need to go back to our project and actually finish setting it up.\n\n\n5:38\nHere’s a checklist of the steps that we are going to take. And throughout this video, we’ll go down the\n\n\n5:43\nlist and we’ll tick them off one by one. Let’s start off by cloning the project. By the way, all the links you need for this video\n\n\n5:49\nare going to be in the video description. Once you’ve cloned the project, open the project in your terminal and run npm install.\n\n\n5:56\nThis should finish successfully, but there might be a few\n\n\n6:01\nwarnings because things are always getting deprecated. We will also need to create two local .env\n\n\n6:09\nfiles to store our environment variables. I’ve actually created an example.env file for you here.\n\n\n6:16\nSo if you’re on a Unix system, you can just run this command to create copies from that. And if you open the project in VSCode, you’ll be able to see them here.\n\n\n6:29\nSo here is the example file, and here are the two files I’ve just created. And they have to be named exactly this way because that’s\n\n\n6:37\nwhere our project is going to be looking for them. Now here are some of the environment variables that we’ll need to fill in.\n\n\n6:43\nWe’ll come back to this later once we actually have them. That’s all the setup we have to do for our project code at the moment.\n\n\n6:50\nBut if you try to run it now, it won’t work because we haven’t set up any of the backend yet. But if you do want to see the front end of the project\n\n\n6:58\non its own and play around with it, then I actually have an earlier commit where it’s just\n\n\n7:04\nusing placeholders for all of the backend logic. So if you go to the GitHub repo and click on the commits\n\n\n7:10\ntab, you can scroll down all the way to the bottom. And there’s this commit here that says front end boilerplate.\n\n\n7:18\nSo you can copy this commit hash, and then you can run this command in your project folder to check out that specific commit.\n\n\n7:27\nSo if you use that command to roll it back to that commit, you should be able to run npm run dev,\n\n\n7:33\nand it’ll start a local version of the site. And this will run a version of the site where you just have the\n\n\n7:39\nfront end and all of the backend integration is stripped out. You can still click around and play around with the UI, but it won’t do anything.\n\n\n7:47\nAnd you’ll find that any of the buttons or the interactions will basically just console log a to-do statement for it to be implemented.\n\n\n7:54\nBut now, back to this project, we will want to use the latest commit. So if you did check out the older commit, then\n\n\n8:00\nplease use this command to revert it back. Let’s move on to the next step, which is to create an actual Supabase project.\n\n\n8:06\nGo to Supabase.com and create or log in with your account. In your dashboard, click create new project.\n\n\n8:15\nYou might also have to create an organization first, but I already have one here.\n\n\n8:21\nFill in your project name and generate a secure password for your database. You’ll also want to copy the database password\n\n\n8:28\nas well, because you’re going to need it later when we set up the Supabase CLI.\n\n\n8:34\nAnd finally, choose a region that’s close to you or your customers. Then go ahead and create the project.\n\n\n8:42\nThis will take a few minutes to set up, but while you wait, it does show you your API keys and some important\n\n\n8:48\ninformation that we will need in the next step. Or if your project already finished setting\n\n\n8:53\nup, then it will look something like this. On the toolbar on the left, go over to project settings.\n\n\n9:00\nYou’ll find some really useful things on this page. For example, you can look at what compute your project is configured to use.\n\n\n9:07\nYou can also check out how much storage disk you’re using up already. And also extra options like adding custom domain names.\n\n\n9:16\nBut for now, what we need is under this API configuration tab. Here you’ll find the project URL and two API keys.\n\n\n9:26\nOne is a public key, so this is for the Supabase client. This one is okay to be revealed, because this is the one that’s\n\n\n9:33\nusually embedded with the front end client anyways. It’s going to be what your website uses to call the Supabase backend.\n\n\n9:41\nThe other one is a secret key. This is useful for doing backend server-side operations. This one you definitely do not want to reveal.\n\n\n9:49\nSo now we’re going to copy the URL and the public key back to our project. And then back in your project, go to your .env.local\n\n\n9:57\nfile, or create one if you didn’t do it already. And we’ll only need these two things, we actually don’t\n\n\n10:02\nneed these other keys, so we can delete those. And go ahead and paste your project URL and your public key.\n\n\n10:10\nNow to work with Supabase from our local environment, we’re going to want to use the Supabase CLI.\n\n\n10:16\nSo just search for Supabase CLI on Google, and you should see the official documentation pop up.\n\n\n10:22\nThen scroll down and follow the instructions for your specific platform to install the CLI.\n\n\n10:29\nThen you can verify the installation using this command. For this video I’m using Supabase version 2, so if you’re\n\n\n10:35\nusing a different major version, then keep in mind that some of the CLI commands may be different.\n\n\n10:41\nNow back in our development environment, you’d normally have to run this command to initialize Supabase\n\n\n10:46\nto add it to a project that doesn’t have it yet. But for our project, I actually initialized Supabase\n\n\n10:51\nearlier, and you can tell because there’s a Supabase folder with a config file. So we don’t have to run the command again for this one.\n\n\n10:59\nWe will need to run this command to link your local project with the remote Supabase project.\n\n\n11:05\nDon’t forget to replace the PROJECT REF variable with your own one. Your project reference is basically the random ID part of your URL.\n\n\n11:14\nWhen you run this command, it’s going to ask you to enter\n\n\n11:19\nyour database password from when you created the project. So go ahead and do that as well.\n\n\n11:27\nNow that should work successfully, but it might throw a warning about the local config being different from the linked project.\n\n\n11:34\nBut I wouldn’t worry about that for now. Then to test if everything is set up correctly, you can run this command.\n\n\n11:40\nYou should see a list of projects, and you should also see a dot next to the one that is linked.\n\n\n11:47\nAlright, so at this point we’ve downloaded the project code, and we’ve set up the Supabase project itself. Let’s move on to the next step.\n\n\n11:54\nNext, we’re going to set up Google Cloud so that we can let our users log in with a Google account. Supabase actually has a lot of different options\n\n\n12:01\nfor signing in, but I prefer to just use a third party integration like Google, because it’s\n\n\n12:07\nboth easier for us to maintain, and it’s also easier for our customers as well, because they\n\n\n12:12\ndon’t have to sign up for a separate account. First, head over to the Google Cloud console, and then either\n\n\n12:18\nlog in or create an account if you don’t already have one. And if this is your first time using Google Cloud,\n\n\n12:25\nyou will also have to create a new project. So I’ve created a project here for this SaaS application.\n\n\n12:32\nNow you might also need to attach a credit card to this account, but the OAuth pricing\n\n\n12:37\nis free for up to 50,000 monthly active users, so you probably won’t get charged.\n\n\n12:43\nSo once you’re on this page, go to the search bar at the top and type in “Credentials”, and\n\n\n12:48\nselect “Credentials” from “API and Services”. Now on this page, click here to create credentials, and select “OAuth client ID”.\n\n\n12:58\nFor the application type, choose “web application”, and then type in a name for it here.\n\n\n13:05\nNow we also have to add the authorized JavaScript origins and the authorized redirect URIs.\n\n\n13:13\nFor the authorized origin, put your Supabase project URL, and you can also put localhost so that\n\n\n13:18\nwe can test it from our development environment. And for the redirect, put in this URL.\n\n\n13:24\nThis is actually provided to us by Supabase. If you go to authentication, then to providers,\n\n\n13:30\nand then expand the Google tab, you will see the callback URL here for us to copy.\n\n\n13:36\nSo let’s go back to the project and put that in. So now your settings should look something like this,\n\n\n13:42\nand then you can go ahead and click “create”. And when that’s done, you should see this little pop-up\n\n\n13:48\nwith your client ID and your client secret. So go back to your Supabase dashboard, go to authentication,\n\n\n13:56\nand then providers, and then open the Google tab, and enable “sign in for Google”.\n\n\n14:03\nAnd then just paste the client ID and the secret from the previous step, and click “save”.\n\n\n14:09\nWhile we’re here, you can also check out all the other authentication providers available, in case you want to use them.\n\n\n14:16\nAnd just an interesting note, I’ve also enabled email as a provider, and I think that’s the default for a new Supabase project anyways.\n\n\n14:23\nBut for testing purposes, I actually disabled this “confirm email” feature, because it\n\n\n14:28\nmakes it easier for me to create test users. Okay, so now you’re done with auth, and your Supabase project\n\n\n14:34\nshould be wired up to let users log in with Google. Next, we’re also going to need an OpenAI API key.\n\n\n14:41\nWe’re going to be using this for our back-end feature, where we automatically assign\n\n\n14:46\nlabels to a task, based on its description. Now, this API is pay-per-use, but the pricing is quite\n\n\n14:53\ncheap, and our usage is going to be very low. If you don’t have an OpenAI account, then go to platform.OpenAI.com to create it.\n\n\n15:02\nLog into your account, and then open the search bar, and search for “API keys”.\n\n\n15:08\nAnd then you can click up here to create a new API key for your project. So go ahead and create that, and then copy the secret key.\n\n\n15:15\nThen, back in your project terminal, run the Supabase-cli command to set the OpenAI key as a back-end secret.\n\n\n15:23\nThe project will be using this later on in our server-side edge functions. The final dependency we need for this project is Stripe, and we’re\n\n\n15:33\ngoing to use this to process payments for our customers. So, back in our app, we limit users to only creating 100 tasks per month.\n\n\n15:43\nAnd when they upgrade to Premium, the limit gets raised to 10,000. Now, this is probably not the best business model\n\n\n15:50\nfor this app, but the point is just to show you how to implement this at a technical level. Compared to our other dependencies, Stripe is a little bit more complex to set up.\n\n\n16:00\nBut I’m going to try to keep this as simple as possible. There are three main steps we need to go through.\n\n\n16:06\nFirst, we want to create an account and set up the Stripe CLI. And then we’ll have to create a product, which\n\n\n16:11\nis basically the subscription for our app. And finally, we’ll need to set up webhooks so that\n\n\n16:17\nStripe can tell our Supabase server whenever there’s an update with our customers’ payments.\n\n\n16:23\nIf you don’t have a Stripe account yet, then go to stripe.com and create one. Once you’re signed in, you should be on this dashboard.\n\n\n16:31\nJust go to the top and make sure that you enable test mode. This will basically let us test the whole integration\n\n\n16:38\nwithout using real money or credit cards. Our Stripe account will also have a secret API key.\n\n\n16:45\nSo to find it, just go into the search box and type in “API key” and then go to “developers\n\n\n16:50\nAPI key.” And take note of the secret key here, because we’re going to need this for later.\n\n\n16:56\nNext, we’ll need to install the Stripe CLI. So just search for Stripe CLI on Google and it\n\n\n17:01\nshould link you to the official documentation. And if you scroll down, you’ll see different tabs depending\n\n\n17:07\non which platform you want to see the command for. Once you’ve installed it, then run this command in\n\n\n17:12\nyour terminal to log in with your Stripe account. Next, let’s use the Stripe CLI to create a new product and a price.\n\n\n17:20\nIn Stripe, products and prices are two distinct object types. And a product can have multiple different prices, but\n\n\n17:28\nevery price must be associated with a product. Now, to create the products and the prices, we can go to our Stripe\n\n\n17:35\ndashboard and then click to create them through there. But we can also do it with a command in the CLI, which is a little bit faster.\n\n\n17:45\nSo that’s what I’m going to do for this project. So if you go back to the project and then you open the README file, scroll all the way down until\n\n\n17:51\nyou see the part that says Stripe setup. And there’s a couple of commands that you can just copy and paste into your terminal\n\n\n17:59\nto create the product via the CLI directly. This command will create both a price and a product for us together.\n\n\n18:06\nIt creates a $10 monthly subscription for a new product called Taskmaster Premium with a 14-day trial.\n\n\n18:14\nSo go ahead and run that in your project terminal. And when it’s done, you should see an output object like this.\n\n\n18:22\nAnd we’re going to want to take note of the price ID because we will need that for later. Next, we’ll also need to run another command to set up the customer portal.\n\n\n18:32\nThis is going to set up a page that customers can go to to either update or cancel their subscriptions.\n\n\n18:39\nJust make sure that before you run this command to replace the URLs with your own Supabase URLs.\n\n\n18:45\nAnd in this project, I actually haven’t created the privacy or the terms of service pages. So these links will probably just bounce back to the homepage.\n\n\n18:54\nSo that’s something you can add if you want. And to finish our Stripe setup, we will need to add a webhook.\n\n\n19:03\nA webhook is a URL endpoint that we provide that Stripe can send events and notifications to.\n\n\n19:09\nAnd it will use this to tell us about things like successful checkouts and subscription cancellations.\n\n\n19:15\nAnd then we’ll use that information to update our database. So go back to your Stripe dashboard and then search for webhooks.\n\n\n19:23\nAnd then go to Developers / Webhooks. And here, click add endpoint.\n\n\n19:29\nOur webhook endpoint is going to look something like this. We will implement this later as an edge function.\n\n\n19:35\nJust make sure to update the project ID to your actual Supabase project URL.\n\n\n19:41\nAnd then enter it here as your endpoint.\n\n\n19:47\nNext, you have to select which events for it to listen to.\n\n\n19:53\nThese are the four events that you need to select. These events will give us everything we need to build the\n\n\n20:04\nsubscription functionality that we want for our app.\n\n\n20:12\nOnce you’ve filled in the endpoint and the events, then click add endpoint. And now your webhook will be set up and you can\n\n\n20:20\nclick here to get your webhook secret key. So now we should have all the keys we need to integrate Stripe with our project.\n\n\n20:28\nIf you missed one of them, then just rewind this chapter. And again, here’s the Supabase CLI command you need to\n\n\n20:34\nrun to set up the secrets in the Supabase project. So go ahead and run these for each of the keys.\n\n\n20:41\nWe’re going to need the Stripe API secret key, the price ID and the webhook secret.\n\n\n20:47\nSo back in my terminal, I’ve set up all three keys. And to confirm that I can run Supabase secrets list.\n\n\n20:56\nAnd that will show me all the different secrets that I’ve registered with my Supabase project. So at this point, you should see four of them.\n\n\n21:04\nNow there’s actually one more place where we need to set up our Stripe secret key. And that’s going to be in our vault table in the database.\n\n\n21:12\nAnd this is an inbuilt Supabase table where we can store secret keys that our database can use as part of automatic triggers.\n\n\n21:20\nIn this project specifically, I’m using it so that I can make Stripe create a user for\n\n\n21:26\nus whenever we create a user in Supabase. Because there are different user systems, but we want them to be associated.\n\n\n21:33\nWe’re going to implement that using a database trigger. But to do that, it will need to have the stripe secret\n\n\n21:38\nkey so that it has the authority to create new users. To add this, go back to your Supabase dashboard and then go to SQL editor.\n\n\n21:46\nAnd that in this window, we’re going to run this command.\n\n\n21:52\nJust remember to replace this with your actual secret key from Stripe. And then click run and then you should see that it should\n\n\n22:00\ncreate this key for you and return a key ID. And if you’ve accidentally added the wrong\n\n\n22:06\nsecret or you just want to update it, then you’ll need to use this command instead. So now that we’re done setting up our dependencies, let’s go\n\n\n22:14\nback to our Supabase project and set up our database next. Our database is going to be a Postgres SQL database\n\n\n22:21\nand we’re going to create three tables. We’ll have a profile table for each user.\n\n\n22:28\nThere we will store information about their account status. Now this is going to be read only for the user.\n\n\n22:35\nIt’s also going to be linked to an auth table, which comes out of the box with Supabase. This means that our user ID primary key in\n\n\n22:43\nthis profile table is going to map directly to a user ID in the auth table as well.\n\n\n22:50\nAnd you’re going to see this pattern where we use a primary key for the user as a foreign key in each of our tables.\n\n\n22:58\nNow our most important table is going to be this task table here. We will store each task as a row and it will have a user ID as part of its key.\n\n\n23:09\nAnd finally, we’ll also have a separate table to track the usage of each user per month.\n\n\n23:15\nAnd the reason I decided to use a separate table to track the usage is that I think it will\n\n\n23:21\nbe easier to scale that way, rather than tracking it in the user profile table directly.\n\n\n23:27\nSo this is going to be the schema for the database. But on top of this, we will also have security policies and triggers.\n\n\n23:35\nWe’re going to use something called row level security. That basically means that to be able to read or update a\n\n\n23:42\nrow of a database, certain conditions have to be met. For example, we can check if the user ID of a request matches\n\n\n23:50\nthe user ID value of the row that we want to access. And then we use row level security to enforce these roles for our app.\n\n\n24:00\nAnd we’re also going to have something called triggers. Triggers are functions that we can execute when\n\n\n24:05\nsomething happens inside our database. And these functions are run by our dedicated PostgreSQL server.\n\n\n24:12\nIn this project, we will use them quite a lot. We’ll use triggers to update task limits for each user whenever they create a task.\n\n\n24:20\nWe can also stop them from creating new tasks once they’ve reached their limit. We’ll also use it to automatically create a Stripe\n\n\n24:28\nuser whenever a new user is created in our system. That’s because, as I mentioned before, Stripe has its own user system.\n\n\n24:36\nSo we need some automation to link them together. And finally, we can also use it to automatically clean up our\n\n\n24:42\nusers and our storage when things are deleted as well. Now, that’s a lot of stuff I just went through.\n\n\n24:48\nSo how are we going to implement all of that very quickly? Well, with Supabase, we can write instructions\n\n\n24:54\nfor all of those things using SQL files. And if we go back to our project and then we\n\n\n24:59\ngo to the Supabase migrations folder, you’ll see that we have a bunch of SQL files for each of these things that we want to add.\n\n\n25:06\nAnd if you click through them, you could see the statements used to create the tables. So here’s the table schema.\n\n\n25:13\nAnd you can also see triggers being created and security policies being created. And the reason I’ve separated each of these statements\n\n\n25:21\ninto separate files is just to make it easier for you to understand each new thing that we’re setting up.\n\n\n25:28\nIt’s exactly the same as if I had all of these statements in one giant file, but that’s just going\n\n\n25:33\nto be a little bit more difficult to read. To apply these files to a project, you can run this command.\n\n\n25:40\nThis is called apply a migration. It will execute all of the SQL statements in each file in lexical order.\n\n\n25:48\nAnd so if you go back to our project, you’ll see that each of our SQL files has a number in front of it. And so basically that’s the order that I want to run the files in.\n\n\n25:56\nBut in a real world situation, I think that people would typically use a timestamp for this number.\n\n\n26:02\nSo I’m going to go ahead and run this now in my terminal. And once the command is done, Supabase will have\n\n\n26:08\ncreated all the databases, triggers, and security policies that we told it to in those SQL files.\n\n\n26:16\nNow notice if I try to run the command again, it doesn’t actually\n\n\n26:21\ndo anything, even if I change the contents of these files. That’s because these commands, once they apply a migration file,\n\n\n26:30\nit kind of remembers that it’s already done that file. So if you want to create new migrations, you actually\n\n\n26:37\nhave to create a new file and just make that number in front of it keep increasing.\n\n\n26:43\nBut if the project is still in development like this one here, and you wanted to do a full reset, you can run this command instead.\n\n\n26:50\nThis will clear your entire database and then run every SQL file from the beginning. And once you finish running your migration, you can\n\n\n26:56\ngo to your Supabase project to check it out. So go to database and then go to schema visualizer, and you should\n\n\n27:02\nsee the schema for the database that you just created. And something very cool that I want to mention about Supabase\n\n\n27:09\nis that it automatically creates an API for your database. So you can do CRUD operations from your front end really\n\n\n27:16\neasily without having to implement the API yourself. You can read more about that feature inside the REST API\n\n\n27:23\nor the Data API documentation on the Supabase website. Now back to the app, one of my favorite features here\n\n\n27:30\nis that users can upload images to their tasks. To implement this, we’re going to use Supabase’s storage feature.\n\n\n27:37\nAnd I have some good news for you. If you ran the previous command, then you’ve already set this up.\n\n\n27:43\nOne of our SQL files from the previous step actually creates something called a storage bucket. It did that by creating an entry in this built-in storage buckets table.\n\n\n27:53\nAnd behind the scenes, that actually causes Supabase to set up a storage bucket for us.\n\n\n27:59\nSo if you go back to your Supabase dashboard and then you go down and click storage, you’ll see that it’s created a bucket for us here.\n\n\n28:06\nAnd the bucket doesn’t have anything in it right now. But if you go here and click edit bucket and click on\n\n\n28:12\nadditional configuration, you’ll see that we’ve actually configured the bucket already from our SQL schema.\n\n\n28:18\nWe’ve configured it to restrict the upload size to one megabyte, and we’ve also configured it to only accept images.\n\n\n28:25\nNow I do want to mention that I did make this bucket public, which means that if people have the URL to an\n\n\n28:31\nimage, they can actually just go ahead and see it. And I did that because it’s more simple to set it up with the front end.\n\n\n28:39\nBut if you were doing this for real, then I probably recommend making this private. It’s just that it’s a little bit more complex to set up.\n\n\n28:46\nSo it’s a little bit out of scope for this video. So now we’ve set up the database and the storage,\n\n\n28:51\nand we’re moving on to the final setup step, which is deploying our edge functions.\n\n\n28:57\nEdge functions are custom functions that run on demand in response to HTTP requests.\n\n\n29:03\nThink of them as a way to run any code that you’d normally need a server for. In our project, you’ll find them in the Supabase/functions folder.\n\n\n29:11\nEach subfolder is an edge function. The code is implemented as a TypeScript function,\n\n\n29:16\nand it will be run in a Deno environment. So here, I’m just going to go back to the project to show you where they are.\n\n\n29:23\nGo to your Supabase folder, and then go to your functions folder. And then each of the functions is going to be its own separate subfolder.\n\n\n29:30\nIf you open that up, you’ll see this index.ts file, and that is the code for one of our functions.\n\n\n29:37\nNow, we will be able to build and deploy these functions directly from our project using the Supabase CLI.\n\n\n29:45\nThey also support environment variables, which is where we can go and fetch those secrets that we\n\n\n29:51\nstored earlier when we set up our dependencies. Here’s a short snippet from one of our functions,\n\n\n29:57\nand it’s the function called createTaskWithAI. This function will create the task and then put it into the table.\n\n\n30:04\nAnd after that, it will use AI to determine automatic tag or a label for the task based on the task title,\n\n\n30:11\nand then it will update the task with that tag. The second function is called createStripeSession,\n\n\n30:18\nand we’ll be using this in the profile page. So this is here, and when users click this to\n\n\n30:24\nmanage their subscription, this function will generate a URL for them, and this URL will\n\n\n30:30\neither be a checkout session or customer portal depending on the user’s account status.\n\n\n30:36\nFinally, the third and the last function is our webhook endpoint for Stripe. So if you recall from the Stripe chapter, this\n\n\n30:43\nis an endpoint that Stripe will use to send us event notifications when something happens.\n\n\n30:49\nWe will use this to detect when the user should be upgraded to premium or when the subscription ends and\n\n\n30:54\nthey should be downgraded back to the free tier. And as I mentioned before, these functions will all have\n\n\n31:00\naccess to the Supabase secrets that we stored earlier. So that’s how they can access services like Stripe and OpenAI on our behalf.\n\n\n31:09\nFrom our project root, you can use these commands to deploy each of the functions to our Supabase project.\n\n\n31:16\nOnce that’s finished, you can go back to your Supabase dashboard\n\n\n31:23\nand then check them out by clicking edge functions.\n\n\n31:29\nAnd if everything worked correctly, you should see three separate edge functions being created for us.\n\n\n31:35\nIf you click on one of them, you’ll also be able to see links to metrics and logs. So this is where you can go to debug them.\n\n\n31:43\nNow there’s one more thing we need to do. Click on your Stripe webhook function and then\n\n\n31:48\ngo to details and then scroll all the way down to function configuration and then click to disable\n\n\n31:55\nenforce JWT verification and click save. This verification is there to check that whoever calls\n\n\n32:01\nthis function is one of our authenticated users. And that’s what we want in most cases.\n\n\n32:08\nBut in this particular case, we’re expecting Stripe to call this function. And with that, we finally finished all of our setup\n\n\n32:16\nprocess and we’re ready to run the project. Go back to your project terminal and run this command\n\n\n32:21\nto start the local development server. Once you’ve run it, you should see this local URL pop\n\n\n32:29\nup and you can click that to open your project. And if it doesn’t load right away, you might need\n\n\n32:35\nto refresh it, but you can probably now test that each of the features work as intended.\n\n\n32:41\nSo we can log in with Google. We can create a new task.\n\n\n32:52\nAnd when we create a task, we should see that it automatically assigns a label for us that is appropriate for the task.\n\n\n32:59\nWe should also be able to edit a task and add images to it. And then if you go to your profile page, you should\n\n\n33:08\nsee that your task created is tracked properly here and that if you click manage subscription,\n\n\n33:16\nyou get taken to a Stripe checkout page. And then finally go back to our project and just make sure that you can sign out.\n\n\n33:24\nNow if you wanted to deploy something like this, then the easiest way to do this is probably with Vercel,\n\n\n33:30\nbut this is basically just a static NextJS website. So you can use any other process that works for static websites in general.\n\n\n33:37\nIf you wanted to add new functionality or extend the project to do something specific, then here’s\n\n\n33:43\na rough overview of the project structure. The UI elements are in the apps and the components folder.\n\n\n33:49\nThe front-end logic is in the hooks folder, so that’s the client that will connect to Supabase.\n\n\n33:55\nAnd the backend logic is in the Supabase functions folder. And the database and configurations are in the migrations folder.\n\n\n34:03\nAs I was working on this project, I also actually created an integration test suite so that I can quickly\n\n\n34:09\nand more easily test the project’s functionality. You’ll find all the test code in the project under\n\n\n34:15\nthe test/integration directory, and these tests will actually connect to your real project.\n\n\n34:21\nIf you want to run them, then create a file like this to store all of your environment variables\n\n\n34:26\nthat are going to be used in the task, and then update them with your version of these API keys.\n\n\n34:32\nThen go to your terminal and run this command in your project root to run the entire test suite.\n\n\n34:38\nYou can also use this command if you want to run just a specific file.\n\n\n34:45\nNow all the tests should pass, but they might fail the first time due to timeouts because I think\n\n\n34:50\nthat some of these code paths have a cold start. So if you just run them for the first time, they might take a little bit slower than usual.\n\n\n34:57\nSo if they fail, then I recommend to try running it again and seeing if it works. So we’re now at the end of the video.\n\n\n35:04\nThat was quite a large project, and I hope you managed to get everything to work. But if you got stuck or if you have any questions,\n\n\n35:10\nthen feel free to leave a comment either here or on my GitHub page for the project.\n\n\n35:16\nNow as I said at the start, this was a very high-level overview of using Supabase.\n\n\n35:22\nWe went through a lot of stuff very quickly, and there’s a lot of details that I simplified along the way.\n\n\n35:28\nNow if you are interested in diving a little bit deeper, then go to the project repository and check\n\n\n35:34\nout this tutorials folder where I’ve actually created a bunch of different documents for each major\n\n\n35:40\nfunctionality that we introduced to the project. If you did enjoy this and would like to see a tutorial\n\n\n35:45\nseries covering each of these features in more detail, or you want to see an end-to-end tutorial for a different type of project entirely,\n\n\n35:52\nthen please let me know in the comments. Otherwise, I hope this was useful, and I’ll see you in the next one.",
    "crumbs": [
      "Building with Next and Supabase",
      "<span class='chapter-number'>10</span>  <span class='chapter-title'><yrChapterNumber>10. </yrChapterNumber> Tutorial - intro</span>"
    ]
  },
  {
    "objectID": "001007-tutorial-supabase-projectArchitecture-v001.html",
    "href": "001007-tutorial-supabase-projectArchitecture-v001.html",
    "title": "11  11.  Project Architecture",
    "section": "",
    "text": "11.1 Technical “Stack” (or just “tech stack”)\nThe following diagram highlights the various parts of the app and where they will be running. See below for an explanation of the diagram.\nFrontend:\nBackend (Supabase):\nThird-Party Services:",
    "crumbs": [
      "Building with Next and Supabase",
      "<span class='chapter-number'>11</span>  <span class='chapter-title'><yrChapterNumber>11. </yrChapterNumber> Project Architecture</span>"
    ]
  },
  {
    "objectID": "001007-tutorial-supabase-projectArchitecture-v001.html#technical-stack-or-just-tech-stack",
    "href": "001007-tutorial-supabase-projectArchitecture-v001.html#technical-stack-or-just-tech-stack",
    "title": "11  11.  Project Architecture",
    "section": "",
    "text": "Next.js (fully static app)\nClient library for Supabase integration\n\n\n\nPostgreSQL database\nStorage system (similar to Amazon S3)\nEdge functions (TypeScript in Deno environment)\nBuilt-in authentication system\n\n\n\nGoogle Cloud (for OAuth)\nOpenAI (for AI labeling)\nStripe (for payment processing)\n\n\n11.1.1 Hosting Options\nSupabase Cloud (Recommended):\n\nFree tier available (perfect for this project)\nEasy to set up\n$25/month for the next tier with expanded resources\n\nSelf-Hosted:\n\nCompletely open source\nCan deploy to AWS, GCP, or your own infrastructure\nMore complex to manage (not recommended for beginners)",
    "crumbs": [
      "Building with Next and Supabase",
      "<span class='chapter-number'>11</span>  <span class='chapter-title'><yrChapterNumber>11. </yrChapterNumber> Project Architecture</span>"
    ]
  },
  {
    "objectID": "001007-tutorial-supabase-projectArchitecture-v001.html#summary---setup-checklist",
    "href": "001007-tutorial-supabase-projectArchitecture-v001.html#summary---setup-checklist",
    "title": "11  11.  Project Architecture",
    "section": "11.2 Summary - Setup Checklist",
    "text": "11.2 Summary - Setup Checklist\n\nClone the project from GitHub\nCreate Supabase project\nSet up Google OAuth\nConfigure OpenAI API\nSet up Stripe\nDeploy edge functions\nTest the application",
    "crumbs": [
      "Building with Next and Supabase",
      "<span class='chapter-number'>11</span>  <span class='chapter-title'><yrChapterNumber>11. </yrChapterNumber> Project Architecture</span>"
    ]
  },
  {
    "objectID": "001100-tutorial-supabase-nextjs-intro-v001.html",
    "href": "001100-tutorial-supabase-nextjs-intro-v001.html",
    "title": "12  12.  Tutorial - step by step",
    "section": "",
    "text": "12.1 Project Architecture",
    "crumbs": [
      "Building with Next and Supabase",
      "<span class='chapter-number'>12</span>  <span class='chapter-title'><yrChapterNumber>12. </yrChapterNumber> Tutorial - step by step</span>"
    ]
  },
  {
    "objectID": "001100-tutorial-supabase-nextjs-intro-v001.html#project-architecture",
    "href": "001100-tutorial-supabase-nextjs-intro-v001.html#project-architecture",
    "title": "12  12.  Tutorial - step by step",
    "section": "",
    "text": "12.1.1 Tech Stack\nFrontend:\n\nNext.js (fully static app)\nClient library for Supabase integration\n\nBackend (Supabase):\n\nPostgreSQL database\nStorage system (similar to Amazon S3)\nEdge functions (TypeScript in Deno environment)\nBuilt-in authentication system\n\nThird-Party Services:\n\nGoogle Cloud (for OAuth)\nOpenAI (for AI labeling)\nStripe (for payment processing)\n\n\n\n12.1.2 Hosting Options\nSupabase Cloud (Recommended):\n\nFree tier available (perfect for this project)\nEasy to set up\n$25/month for the next tier with expanded resources\n\nSelf-Hosted:\n\nCompletely open source\nCan deploy to AWS, GCP, or your own infrastructure\nMore complex to manage (not recommended for beginners)",
    "crumbs": [
      "Building with Next and Supabase",
      "<span class='chapter-number'>12</span>  <span class='chapter-title'><yrChapterNumber>12. </yrChapterNumber> Tutorial - step by step</span>"
    ]
  },
  {
    "objectID": "001100-tutorial-supabase-nextjs-intro-v001.html#step-0-install-node-and-hence-npm",
    "href": "001100-tutorial-supabase-nextjs-intro-v001.html#step-0-install-node-and-hence-npm",
    "title": "12  12.  Tutorial - step by step",
    "section": "12.2 Step 0: Install Node (and hence npm)",
    "text": "12.2 Step 0: Install Node (and hence npm)\nYou will need to use the npm (Node Package Manager) tool that comes with the Node.js software. Node.js is software that allows you to run JavaScript programs outside of a browser.\nThere are many Javascript “packages” that are available online. These packages are simply collections of pre-built Javascript code that offer Javascript functions and features for various scenarios. These are very similar in concept to the packages that are available for the “R” language.\nTo install the Node.js packages on your computer you use a tool named npm (stand for “node package manager”).\nTry typing npm -v at the Terminal prompt. If npm is already installed you should see the version number. It npm is not installed you should install nodejs from here - https://nodejs.org/en/download. (nodejs includes the npm tool).\nAfter you’ve installed nodejs\n\nshut your original Terminal\nopen a new Terminal window and try running npm -v. You should see the version number for npm. If that worked great - otherwise try to figure out how to use npm with the help of your favorite AI (or knowledgeable human).",
    "crumbs": [
      "Building with Next and Supabase",
      "<span class='chapter-number'>12</span>  <span class='chapter-title'><yrChapterNumber>12. </yrChapterNumber> Tutorial - step by step</span>"
    ]
  },
  {
    "objectID": "001100-tutorial-supabase-nextjs-intro-v001.html#step-1-clone-and-install-the-project",
    "href": "001100-tutorial-supabase-nextjs-intro-v001.html#step-1-clone-and-install-the-project",
    "title": "12  12.  Tutorial - step by step",
    "section": "12.3 Step 1: Clone and Install the Project",
    "text": "12.3 Step 1: Clone and Install the Project\n\n12.3.1 Download the Code\nThe GitHub link for this project is available in the original video description.\n\nClone the repository to your local machine\n\nGo to https://github.com/pixegami/task-app\nClick the “fork” button to create your own copy of the repo.\nThen go to your own github repo and copy YOUR copy’s URL.\nOpen your Terminal and type git clone URL_FOR_YOUR_REPO to create a new folder with your own copy of the repo.\n\nOpen the project in your terminal\nThe file package.json contains a list of “node packages” (AKA modules) that need to be installed for this project. You need to run the following command to do so. This command will create a new folder named “node_modules” and download the code for each package (AKA module) into that folder. Run the following command now. Note: You may see some deprecation warnings, which are normal.\n\nnpm install\n\n\n12.3.2 Create Environment Files\nYou need to create two local .env files for environment variables. These files will contain API keys and configuration that you’ll add throughout this tutorial. Note that the File names must be exact:\n\n.env.local - for the Next.js application. Run the following command to create that file:\ncp .env.example .env.local\nsupabase/.env - for Supabase functions\n\nRun the following code to create those files from the included .env.example file.\n\n# Copy from the example file\ncp .env.example .env.local\ncp .env.example supabase/.env\n\n\n12.3.3 Optional: Preview the Frontend\nIf you want to see the frontend before connecting the backend:\n\nGo to the GitHub repository commits tab\nScroll to the bottom and find the commit labeled “front end boilerplate”\nCopy the commit hash\nCheck out that specific commit:\n\ntype git -v to see your git version\nrun ONE of the following command depending on your git version\n\ngit 2.23 and later: git switch --detach [commit-hash]\nolder versions of git: git checkout [commit-hash]\n\n\nRun the development server:\n\nnpm run dev\nThis version has placeholder backend logic, allowing you to explore the UI without full functionality.\n\nTo get back to the latest version of the code run the following:\n\nrun ONE of the following command depending on your git version\n\ngit 2.23 and later:\n\ngit switch - or\ngit switch BRANCH_NAME (where BRANCH_NAME is the name of your branch such as master or main)\n\nolder versions of git:\n\ngit checkout - or\ngit checkout BRANCH_NAME (where BRANCH_NAME is the name of your branch such as master or main)",
    "crumbs": [
      "Building with Next and Supabase",
      "<span class='chapter-number'>12</span>  <span class='chapter-title'><yrChapterNumber>12. </yrChapterNumber> Tutorial - step by step</span>"
    ]
  },
  {
    "objectID": "001100-tutorial-supabase-nextjs-intro-v001.html#step-2-create-a-supabase-project",
    "href": "001100-tutorial-supabase-nextjs-intro-v001.html#step-2-create-a-supabase-project",
    "title": "12  12.  Tutorial - step by step",
    "section": "12.4 Step 2: Create a Supabase Project",
    "text": "12.4 Step 2: Create a Supabase Project\n\n12.4.1 Sign Up for Supabase\n\nGo to the Supabase website\nSign up for a free account\nCreate a new project\n\n\n\n12.4.2 Project Configuration\nWhen creating your project, you’ll need to:\n\nChoose a project name\nSet a database password (save this securely)\nSelect a region (choose the closest to your users)\n\nImportant: Save your database password - you’ll need it later.\n\n\n12.4.3 Get Your API Keys\nOnce your project is created:\n\nEdit the .env.local file. It currently looks like this:\n\n# You will need a .env.local file for local dev server (localhost)\n# You will need a .env.test.local file for running the integration tests.\n\n# Create the those files, and add the following variables.\n# The local files are ignored by default.\n\n# In .env.local and .env.test.local:\nNEXT_PUBLIC_SUPABASE_URL=\"https://XXXX.supabase.co\"\nNEXT_PUBLIC_SUPABASE_ANON_KEY=\"XXXX\"\n\n# In addition to that, you also need .env.test.local with these variables:\nSUPABASE_SERVICE_KEY=\"XXXX\"\nSTRIPE_SECRET_KEY=\"sk_test_XXX\"\nSTRIPE_PRICE_ID=\"price_XXX\"\nSTRIPE_WEBHOOK_SECRET=\"whsec_XXX\"```\n\nDelete the bottom few lines and top few lines so that the file now looks like this:\n# In .env.local and .env.test.local:\nNEXT_PUBLIC_SUPABASE_URL=\"https://XXXX.supabase.co\"\nNEXT_PUBLIC_SUPABASE_ANON_KEY=\"XXXX\"\nGo to Project Settings (Gear button at bottom left of screen) → Data API\nCopy the URL.\nModify the following line in the .env.local file to reflect the URL that you copied.\nNEXT_PUBLIC_SUPABASE_URL=\"https://XXXX.supabase.co\"\nClick on the API Keys section.\nCopy the anon public key. Modify the following line in the .env.local file to reflect the URL that you copied.\nNEXT_PUBLIC_SUPABASE_ANON_KEY=\"XXXX\"\nAdd these to your .env.local file:\n\nNEXT_PUBLIC_SUPABASE_URL=your-project-url\nNEXT_PUBLIC_SUPABASE_ANON_KEY=your-anon-key",
    "crumbs": [
      "Building with Next and Supabase",
      "<span class='chapter-number'>12</span>  <span class='chapter-title'><yrChapterNumber>12. </yrChapterNumber> Tutorial - step by step</span>"
    ]
  },
  {
    "objectID": "001100-tutorial-supabase-nextjs-intro-v001.html#step-3-set-up-google-oauth",
    "href": "001100-tutorial-supabase-nextjs-intro-v001.html#step-3-set-up-google-oauth",
    "title": "12  12.  Tutorial - step by step",
    "section": "12.5 Step 3: Set Up Google OAuth",
    "text": "12.5 Step 3: Set Up Google OAuth\n\n12.5.1 Create Google Cloud Project\n\nGo to Google Cloud Console\nCreate a new project\nNavigate to APIs & Services → Credentials\nCreate OAuth 2.0 credentials\n\n\n\n12.5.2 Configure OAuth Consent Screen\n\nSet up the OAuth consent screen\nAdd your application details\nAdd authorized domains\n\n\n\n12.5.3 Get OAuth Credentials\n\nCreate OAuth 2.0 Client ID\nSet application type to “Web application”\nAdd authorized redirect URIs:\n\nAdd your Supabase project callback URL\nFormat: https://[your-project-ref].supabase.co/auth/v1/callback\n\nCopy your Client ID and Client Secret\n\n\n\n12.5.4 Configure in Supabase\n\nGo to your Supabase dashboard\nNavigate to Authentication → Providers\nEnable Google provider\nEnter your Client ID and Client Secret\nSave the configuration",
    "crumbs": [
      "Building with Next and Supabase",
      "<span class='chapter-number'>12</span>  <span class='chapter-title'><yrChapterNumber>12. </yrChapterNumber> Tutorial - step by step</span>"
    ]
  },
  {
    "objectID": "001100-tutorial-supabase-nextjs-intro-v001.html#step-4-set-up-openai-api",
    "href": "001100-tutorial-supabase-nextjs-intro-v001.html#step-4-set-up-openai-api",
    "title": "12  12.  Tutorial - step by step",
    "section": "12.6 Step 4: Set Up OpenAI API",
    "text": "12.6 Step 4: Set Up OpenAI API\n\n12.6.1 Create OpenAI Account\n\nGo to OpenAI Platform\nSign up or log in to your account\nNavigate to API Keys section\n\n\n\n12.6.2 Generate API Key\n\nCreate a new API key\nCopy the key immediately (you won’t be able to see it again)\nStore it securely\n\n\n\n12.6.3 Store as Supabase Secret\nThe OpenAI API key needs to be stored as a Supabase secret for use in edge functions:\n\nInstall Supabase CLI if you haven’t already\nLink your project:\n\nsupabase link --project-ref [your-project-ref]\n\nSet the secret:\n\nsupabase secrets set OPENAI_API_KEY=your-openai-key",
    "crumbs": [
      "Building with Next and Supabase",
      "<span class='chapter-number'>12</span>  <span class='chapter-title'><yrChapterNumber>12. </yrChapterNumber> Tutorial - step by step</span>"
    ]
  },
  {
    "objectID": "001100-tutorial-supabase-nextjs-intro-v001.html#step-5-set-up-stripe",
    "href": "001100-tutorial-supabase-nextjs-intro-v001.html#step-5-set-up-stripe",
    "title": "12  12.  Tutorial - step by step",
    "section": "12.7 Step 5: Set Up Stripe",
    "text": "12.7 Step 5: Set Up Stripe\n\n12.7.1 Create Stripe Account\n\nGo to Stripe’s website\nSign up for an account\nSwitch to Test Mode (top right toggle)\n\n\n\n12.7.2 Get API Keys\n\nNavigate to Developers → API Keys\nCopy both:\n\nPublishable key (starts with pk_test_)\nSecret key (starts with sk_test_)\n\nAdd to your .env.local:\n\nNEXT_PUBLIC_STRIPE_PUBLISHABLE_KEY=your-publishable-key\n\nStore the secret key in Supabase:\n\nsupabase secrets set STRIPE_SECRET_KEY=your-secret-key\n\n\n12.7.3 Create a Product\n\nGo to Stripe Dashboard → Products\nCreate a new product for your subscription\nSet up pricing:\n\nMonthly recurring payment\nSet your price (e.g., $10/month)\n\nCopy the Price ID (starts with price_)\n\n\n\n12.7.4 Get Webhook Signing Secret\n\nGo to Developers → Webhooks\nAdd an endpoint (you’ll update this URL later)\nSelect events to listen to:\n\ncheckout.session.completed\ncustomer.subscription.updated\ncustomer.subscription.deleted\n\nCopy the Webhook Signing Secret\nStore it in Supabase:\n\nsupabase secrets set STRIPE_WEBHOOK_SECRET=your-webhook-secret",
    "crumbs": [
      "Building with Next and Supabase",
      "<span class='chapter-number'>12</span>  <span class='chapter-title'><yrChapterNumber>12. </yrChapterNumber> Tutorial - step by step</span>"
    ]
  },
  {
    "objectID": "001100-tutorial-supabase-nextjs-intro-v001.html#step-6-set-up-supabase-database",
    "href": "001100-tutorial-supabase-nextjs-intro-v001.html#step-6-set-up-supabase-database",
    "title": "12  12.  Tutorial - step by step",
    "section": "12.8 Step 6: Set Up Supabase Database",
    "text": "12.8 Step 6: Set Up Supabase Database\n\n12.8.1 Run Database Migrations\nThe project includes migration files that will set up your database schema.\n\nMake sure you’re in the project root directory\nRun the migrations:\n\nsupabase db push\nThis will create all necessary tables and configurations.\n\n\n12.8.2 Database Structure\nThe migrations create the following main tables:\n\nusers - Stores user account information\ntasks - Stores task data with fields for title, description, label, and image\nuser_subscriptions - Tracks subscription status\n\n\n\n12.8.3 Enable Row Level Security (RLS)\nThe migrations automatically set up Row Level Security policies to ensure:\n\nUsers can only see their own tasks\nUsers can only modify their own data\nProper authentication is enforced",
    "crumbs": [
      "Building with Next and Supabase",
      "<span class='chapter-number'>12</span>  <span class='chapter-title'><yrChapterNumber>12. </yrChapterNumber> Tutorial - step by step</span>"
    ]
  },
  {
    "objectID": "001100-tutorial-supabase-nextjs-intro-v001.html#step-7-set-up-storage",
    "href": "001100-tutorial-supabase-nextjs-intro-v001.html#step-7-set-up-storage",
    "title": "12  12.  Tutorial - step by step",
    "section": "12.9 Step 7: Set Up Storage",
    "text": "12.9 Step 7: Set Up Storage\n\n12.9.1 Create Storage Bucket\n\nGo to your Supabase dashboard\nNavigate to Storage\nCreate a new bucket named “task-images”\n\n\n\n12.9.2 Configure Bucket Settings\nFile size limit:\n\nSet maximum file size to 1 MB\n\nAllowed file types:\n\nConfigure to accept only images (JPEG, PNG, GIF, WebP)\n\nAccess settings:\n\nFor this tutorial, the bucket is set to public\nPublic means anyone with the URL can view the image\nFor production, consider making it private for better security\n\n\n\n12.9.3 Set Storage Policies\nThe storage policies should allow:\n\nAuthenticated users to upload images\nAnyone to read images (if public)\nUsers to delete their own images",
    "crumbs": [
      "Building with Next and Supabase",
      "<span class='chapter-number'>12</span>  <span class='chapter-title'><yrChapterNumber>12. </yrChapterNumber> Tutorial - step by step</span>"
    ]
  },
  {
    "objectID": "001100-tutorial-supabase-nextjs-intro-v001.html#step-8-deploy-edge-functions",
    "href": "001100-tutorial-supabase-nextjs-intro-v001.html#step-8-deploy-edge-functions",
    "title": "12  12.  Tutorial - step by step",
    "section": "12.10 Step 8: Deploy Edge Functions",
    "text": "12.10 Step 8: Deploy Edge Functions\n\n12.10.1 Understanding Edge Functions\nEdge functions are custom serverless functions that run on demand in response to HTTP requests. They allow you to run backend code without managing servers.\nLocation in project: supabase/functions/\n\n\n12.10.2 The Three Functions\n1. createTaskWithAI\n\nCreates a new task in the database\nUses OpenAI to automatically assign a label based on the task title\nUpdates the task with the AI-generated label\n\n2. createStripeSession\n\nGenerates Stripe checkout URLs\nReturns either a checkout session (for new subscriptions) or customer portal (for existing customers)\nUsed when users click “Manage Subscription”\n\n3. stripe-webhook\n\nReceives event notifications from Stripe\nHandles subscription status changes\nUpdates user premium status in the database\n\n\n\n12.10.3 Deploy the Functions\nFrom your project root, deploy each function:\n# Deploy the AI task creation function\nsupabase functions deploy createTaskWithAI\n\n# Deploy the Stripe session function\nsupabase functions deploy createStripeSession\n\n# Deploy the webhook function\nsupabase functions deploy stripe-webhook\n\n\n12.10.4 Verify Deployment\n\nGo to your Supabase dashboard\nClick on “Edge Functions”\nConfirm all three functions are listed\nClick on each function to access metrics and logs for debugging\n\n\n\n12.10.5 Configure Stripe Webhook\nImportant: The Stripe webhook function needs special configuration:\n\nClick on the stripe-webhook function\nGo to “Details”\nScroll to “Function Configuration”\nDisable “Enforce JWT verification”\nClick “Save”\n\nWhy? This function is called by Stripe (not authenticated users), so JWT verification must be disabled.\n\n\n12.10.6 Update Stripe Webhook URL\nNow that your function is deployed, update Stripe with the actual endpoint:\n\nGo to Stripe Dashboard → Developers → Webhooks\nClick on your webhook endpoint\nUpdate the URL to:\nhttps://[your-project-ref].supabase.co/functions/v1/stripe-webhook",
    "crumbs": [
      "Building with Next and Supabase",
      "<span class='chapter-number'>12</span>  <span class='chapter-title'><yrChapterNumber>12. </yrChapterNumber> Tutorial - step by step</span>"
    ]
  },
  {
    "objectID": "001100-tutorial-supabase-nextjs-intro-v001.html#step-9-run-the-application",
    "href": "001100-tutorial-supabase-nextjs-intro-v001.html#step-9-run-the-application",
    "title": "12  12.  Tutorial - step by step",
    "section": "12.11 Step 9: Run the Application",
    "text": "12.11 Step 9: Run the Application\n\n12.11.1 Start the Development Server\nFrom your project root:\nnpm run dev\nThe application should start and display a local URL (usually http://localhost:3000).\n\n\n12.11.2 Test Core Functionality\n1. Authentication\n\nClick to log in with Google\nVerify successful authentication\nCheck that you’re redirected to the dashboard\n\n2. Task Management\n\nCreate a new task with a title and description\nConfirm that an appropriate label is automatically assigned by AI\nVerify the task appears in your dashboard\n\n3. Image Uploads\n\nClick to edit a task\nUpload an image attachment\nVerify the image is displayed correctly\n\n4. User Profile\n\nNavigate to your profile page\nConfirm your task count is tracked correctly\n\n5. Subscription Management\n\nClick “Manage Subscription”\nVerify you’re taken to a Stripe checkout page\nTest the checkout flow (use Stripe test card: 4242 4242 4242 4242)\n\n6. Sign Out\n\nTest the sign out functionality\nConfirm you’re redirected to the login page",
    "crumbs": [
      "Building with Next and Supabase",
      "<span class='chapter-number'>12</span>  <span class='chapter-title'><yrChapterNumber>12. </yrChapterNumber> Tutorial - step by step</span>"
    ]
  },
  {
    "objectID": "001100-tutorial-supabase-nextjs-intro-v001.html#deployment-to-production",
    "href": "001100-tutorial-supabase-nextjs-intro-v001.html#deployment-to-production",
    "title": "12  12.  Tutorial - step by step",
    "section": "12.12 Deployment to Production",
    "text": "12.12 Deployment to Production\n\n12.12.1 Deploying the Frontend\nRecommended: Vercel\nThis is a static Next.js website, making it easy to deploy:\n\nPush your code to GitHub\nImport the project in Vercel\nAdd your environment variables\nDeploy\n\nAlternative Options:\n\nNetlify\nAWS Amplify\nAny static hosting service\n\n\n\n12.12.2 Update Environment Variables\nFor production, you’ll need to:\n\nUpdate Supabase project URL and keys\nSwitch Stripe from test mode to live mode\nUpdate OAuth redirect URIs\nConfigure production domains",
    "crumbs": [
      "Building with Next and Supabase",
      "<span class='chapter-number'>12</span>  <span class='chapter-title'><yrChapterNumber>12. </yrChapterNumber> Tutorial - step by step</span>"
    ]
  },
  {
    "objectID": "001100-tutorial-supabase-nextjs-intro-v001.html#project-structure",
    "href": "001100-tutorial-supabase-nextjs-intro-v001.html#project-structure",
    "title": "12  12.  Tutorial - step by step",
    "section": "12.13 Project Structure",
    "text": "12.13 Project Structure\nUnderstanding where to make changes:\n├── app/                    # Next.js pages and routes\n├── components/            # React UI components\n├── hooks/                 # Client logic and Supabase integration\n├── supabase/\n│   ├── functions/        # Edge functions (backend logic)\n│   └── migrations/       # Database schema and configurations\n└── tests/\n    └── integration/      # Integration test suite\nTo extend functionality:\n\nUI changes: Edit files in app/ and components/\nClient logic: Modify hooks in hooks/\nBackend logic: Update functions in supabase/functions/\nDatabase changes: Create new migrations in supabase/migrations/",
    "crumbs": [
      "Building with Next and Supabase",
      "<span class='chapter-number'>12</span>  <span class='chapter-title'><yrChapterNumber>12. </yrChapterNumber> Tutorial - step by step</span>"
    ]
  },
  {
    "objectID": "001100-tutorial-supabase-nextjs-intro-v001.html#testing",
    "href": "001100-tutorial-supabase-nextjs-intro-v001.html#testing",
    "title": "12  12.  Tutorial - step by step",
    "section": "12.14 Testing",
    "text": "12.14 Testing\n\n12.14.1 Integration Tests\nThe project includes a comprehensive integration test suite that connects to your real Supabase project.\n\n\n12.14.2 Set Up Test Environment\n\nCreate a test environment file:\n\ncp example.env tests/.env.test\n\nUpdate with your API keys and credentials\n\n\n\n12.14.3 Run Tests\nRun all tests:\nnpm test\nRun a specific test file:\nnpm test -- tests/integration/specific-test.spec.ts\nImportant: Tests may fail on the first run due to cold starts. If this happens, simply run them again.",
    "crumbs": [
      "Building with Next and Supabase",
      "<span class='chapter-number'>12</span>  <span class='chapter-title'><yrChapterNumber>12. </yrChapterNumber> Tutorial - step by step</span>"
    ]
  },
  {
    "objectID": "001100-tutorial-supabase-nextjs-intro-v001.html#troubleshooting",
    "href": "001100-tutorial-supabase-nextjs-intro-v001.html#troubleshooting",
    "title": "12  12.  Tutorial - step by step",
    "section": "12.15 Troubleshooting",
    "text": "12.15 Troubleshooting\n\n12.15.1 Common Issues\nEnvironment variables not loading:\n\nEnsure file names are exactly .env.local and supabase/.env\nRestart the development server after changes\nCheck for typos in variable names\n\nAuthentication errors:\n\nVerify Google OAuth redirect URIs match exactly\nCheck that the Supabase callback URL is correct\nEnsure OAuth credentials are properly configured\n\nEdge functions failing:\n\nCheck Supabase secrets are set correctly\nReview function logs in the Supabase dashboard\nVerify all dependencies are installed\n\nStripe webhook not working:\n\nConfirm JWT verification is disabled for the webhook function\nCheck that the webhook URL is correct\nVerify webhook signing secret matches\n\nDatabase errors:\n\nEnsure migrations ran successfully\nCheck Row Level Security policies\nVerify user authentication is working",
    "crumbs": [
      "Building with Next and Supabase",
      "<span class='chapter-number'>12</span>  <span class='chapter-title'><yrChapterNumber>12. </yrChapterNumber> Tutorial - step by step</span>"
    ]
  },
  {
    "objectID": "001100-tutorial-supabase-nextjs-intro-v001.html#next-steps",
    "href": "001100-tutorial-supabase-nextjs-intro-v001.html#next-steps",
    "title": "12  12.  Tutorial - step by step",
    "section": "12.16 Next Steps",
    "text": "12.16 Next Steps\n\n12.16.1 Further Learning\nFor more detailed tutorials on specific features, check the tutorials/ folder in the project repository, which includes in-depth documentation on:\n\nAuthentication implementation\nDatabase design and RLS policies\nEdge functions in detail\nStorage configuration\nStripe integration patterns\n\n\n\n12.16.2 Extending the Project\nConsider adding:\n\nEmail notifications\nTask categories and filters\nTeam collaboration features\nAdvanced reporting and analytics\nMobile application\nAdditional payment plans",
    "crumbs": [
      "Building with Next and Supabase",
      "<span class='chapter-number'>12</span>  <span class='chapter-title'><yrChapterNumber>12. </yrChapterNumber> Tutorial - step by step</span>"
    ]
  },
  {
    "objectID": "001100-tutorial-supabase-nextjs-intro-v001.html#additional-resources",
    "href": "001100-tutorial-supabase-nextjs-intro-v001.html#additional-resources",
    "title": "12  12.  Tutorial - step by step",
    "section": "12.17 Additional Resources",
    "text": "12.17 Additional Resources\n\nSupabase Documentation: https://supabase.com/docs\nNext.js Documentation: https://nextjs.org/docs\nStripe Documentation: https://stripe.com/docs\nOpenAI API Documentation: https://platform.openai.com/docs",
    "crumbs": [
      "Building with Next and Supabase",
      "<span class='chapter-number'>12</span>  <span class='chapter-title'><yrChapterNumber>12. </yrChapterNumber> Tutorial - step by step</span>"
    ]
  },
  {
    "objectID": "001100-tutorial-supabase-nextjs-intro-v001.html#conclusion",
    "href": "001100-tutorial-supabase-nextjs-intro-v001.html#conclusion",
    "title": "12  12.  Tutorial - step by step",
    "section": "12.18 Conclusion",
    "text": "12.18 Conclusion\nYou now have a fully functional SaaS application with authentication, database management, file storage, AI integration, and payment processing. This foundation can be extended and customized for virtually any SaaS product idea.\nIf you encounter any issues or have questions, refer to the project’s GitHub repository or leave a comment on the original tutorial video.\nHappy building!",
    "crumbs": [
      "Building with Next and Supabase",
      "<span class='chapter-number'>12</span>  <span class='chapter-title'><yrChapterNumber>12. </yrChapterNumber> Tutorial - step by step</span>"
    ]
  },
  {
    "objectID": "000010-topics-v001.html",
    "href": "000010-topics-v001.html",
    "title": "16  13.  TOPICS (ignore this section - it is just for me to develop the book)",
    "section": "",
    "text": "16.1 Sessions 1,2",
    "crumbs": [
      "Ignore this - in progress work",
      "<span class='chapter-number'>16</span>  <span class='chapter-title'><yrChapterNumber>13. </yrChapterNumber> TOPICS (ignore this section - it is just for me to develop the book)</span>"
    ]
  },
  {
    "objectID": "000010-topics-v001.html#sessions-12",
    "href": "000010-topics-v001.html#sessions-12",
    "title": "16  13.  TOPICS (ignore this section - it is just for me to develop the book)",
    "section": "",
    "text": "Survey of current AI capabilities and shortcomings.\nPopular AI tools and models.\nAI tools for data analytics.\nRunning AI models locally vs remotely - privacy and security concerns.\nLegal and ethical considerations.\nExpert’s projections on trajectory of AI capabilities in the near and medium‑term future.",
    "crumbs": [
      "Ignore this - in progress work",
      "<span class='chapter-number'>16</span>  <span class='chapter-title'><yrChapterNumber>13. </yrChapterNumber> TOPICS (ignore this section - it is just for me to develop the book)</span>"
    ]
  },
  {
    "objectID": "000010-topics-v001.html#intro-to-coding-with-an-llm",
    "href": "000010-topics-v001.html#intro-to-coding-with-an-llm",
    "title": "16  13.  TOPICS (ignore this section - it is just for me to develop the book)",
    "section": "16.2 Intro to coding with an LLM",
    "text": "16.2 Intro to coding with an LLM\n\nIntro to Cursor AI editor. . Context length issues.\nPrompting - best practices.\nAsk mode vs Agent mode\nPricing - based on token use, model selection input tokens vs output tokens\nIntro to “Developer Tools” in the browser (e.g. Console, etc)",
    "crumbs": [
      "Ignore this - in progress work",
      "<span class='chapter-number'>16</span>  <span class='chapter-title'><yrChapterNumber>13. </yrChapterNumber> TOPICS (ignore this section - it is just for me to develop the book)</span>"
    ]
  },
  {
    "objectID": "000010-topics-v001.html#how-an-llm-works",
    "href": "000010-topics-v001.html#how-an-llm-works",
    "title": "16  13.  TOPICS (ignore this section - it is just for me to develop the book)",
    "section": "16.3 How an LLM works",
    "text": "16.3 How an LLM works\n\ntraining date cutoff\ntrained on “Internet”\nobjective - predict next token - if wrong modify weights slightly to make the correct token slightly more likely to be chosen next time\n\nrepeat this training over entire “Internet size” data many many timess\n\nprobability distribution of next most likely token\ntokenization\ntemperature -\nmodel sizes - parameters\nLLM vs other modalities - eg pictures, audio, video, special purpose (e.g. recognizing fraud),\nmulti-modal models",
    "crumbs": [
      "Ignore this - in progress work",
      "<span class='chapter-number'>16</span>  <span class='chapter-title'><yrChapterNumber>13. </yrChapterNumber> TOPICS (ignore this section - it is just for me to develop the book)</span>"
    ]
  },
  {
    "objectID": "000010-topics-v001.html#section",
    "href": "000010-topics-v001.html#section",
    "title": "16  13.  TOPICS (ignore this section - it is just for me to develop the book)",
    "section": "16.4 ",
    "text": "16.4 \n\nSurvey of Web development technologies - HTML, CSS, JavaScript, NodeJS, web development frameworks (eg. React).\nDeeper dive into browser-based Developer Tools (e.g. the debugger)\nIf there is time - survey of advanced web development concepts - SCSS, bundlers (e.g.. webpack), etc\nHomework: Update the initial project to include additional features. Respond to feedback.\nSession 6\n\nAI agents (as related to coding)",
    "crumbs": [
      "Ignore this - in progress work",
      "<span class='chapter-number'>16</span>  <span class='chapter-title'><yrChapterNumber>13. </yrChapterNumber> TOPICS (ignore this section - it is just for me to develop the book)</span>"
    ]
  },
  {
    "objectID": "000010-topics-v001.html#overview-of-working-with-the-command-line",
    "href": "000010-topics-v001.html#overview-of-working-with-the-command-line",
    "title": "16  13.  TOPICS (ignore this section - it is just for me to develop the book)",
    "section": "16.5 Overview of working with the command line",
    "text": "16.5 Overview of working with the command line",
    "crumbs": [
      "Ignore this - in progress work",
      "<span class='chapter-number'>16</span>  <span class='chapter-title'><yrChapterNumber>13. </yrChapterNumber> TOPICS (ignore this section - it is just for me to develop the book)</span>"
    ]
  },
  {
    "objectID": "000010-topics-v001.html#overview-of-gitgithub",
    "href": "000010-topics-v001.html#overview-of-gitgithub",
    "title": "16  13.  TOPICS (ignore this section - it is just for me to develop the book)",
    "section": "16.6 Overview of git/github",
    "text": "16.6 Overview of git/github\n\nSession 7, 8\n\nOverview of relational databases and SQL\nNOSql - Document database (e.g. mongo db)\nIntegrating a database with your software\nHomework - expand on features of previous submission, track everything in git and github. Include database features if that hasn’t already been done.\n\nMCP Servers\nSessions 9,10:\n\nSurvey of Internet architecture and infrastructure technologies - e.g. servers (web, database), “containerization”, virtual servers, DNS\nDeploying a web product\nIf there is time: CI/CD using github\n\nSessions 11,12:\n\nSurvey of programming languages and related technologies. How to determine a good fit for your project? Survey of tech product categories (web, mobile, data analytics, embedded systems, high performance e.g. algorithmic trading, etc)\nSurvey of Python language for non-Python coders.\n\nSessions 13,14:\n\nUI development tools – e.g. figma, sketch, framer, webflow, canva\ncharting languages, eg. mermaid\n\nSessions 15,16:\n\nCreating and using automated test cases\n\n\n\n\nSessions 17,18:\n\nIntegrating with 3rd party services via APIs.\nAdding credit card processing to a web service (e.g. via Stripe)\nIf there is time: Creating your own APIs (possibly to be included in a follow on course)\n\nSessions 19,20:\n\nDeveloping mobile apps\nUsing phone emulators for app development (e.g. Android Studio, Xcode)\n\nSessions 21,22,23:\n\nOverview of no-code/low-code workflow automation tools – e.g. make, n8n, zapier, gumloop (new AI first approach), connect common tools without writing full software applications.\nRapid development when compared with custom coded apps but can be more expensive to run. Great for prototyping or getting out version 1 of complicated apps. Can also be used in production but at much higher (sometimes prohibitive) cost.\n\n\nHomework: develop\n\nSession 24:\n\nHigh level survey of architecture of deep learning models. Using this knowledge to inform best practices for effective use of AIs (e.g. why some AIs cannot count the number of r’s in “strawberry”). vector embeddings, tokens, the perceptron, deep neural networks, training data, objective function, backpropagation, sizes of models (measured in parameters) and compute requirements, pretraining, post training, reinforcement learning, RLHF, reasoning models, multi-modal models (“modality conversion models” vs “native multi modal”)\n\n\n\n\nSessions 25,26,27:\n\nHow to customize an AI with your own data:\nDifferent approaches to customizing an AI – discuss pros/cons of each approach\n\nAdd data to context (simplest approach), discuss context sizes of models\nRetrieval Augmented Generation (RAG), vector databases\nSurvey of “Fine Tuning” concepts\n\n\n(If there is time or perhaps for a 2nd semester course) -\n\nUsing advanced AI coding tools. The following are some current examples, but these will most likely need to be updated later. We will obviously not cover all of these. We will just introduce the types of tools and what they enable you to do). e.g. openRouter, langchain.com, langflow, flowwiseai , auto-gpt, agentGPT, llamaIndex, GradientJ, Haystack, orq.ai\nDeveloping AI agent software.",
    "crumbs": [
      "Ignore this - in progress work",
      "<span class='chapter-number'>16</span>  <span class='chapter-title'><yrChapterNumber>13. </yrChapterNumber> TOPICS (ignore this section - it is just for me to develop the book)</span>"
    ]
  },
  {
    "objectID": "000500-htmlCssJavascript-v001.html",
    "href": "000500-htmlCssJavascript-v001.html",
    "title": "17  14.  Overview of HTML, CSS, JavaScript",
    "section": "",
    "text": "17.1 Intro to “Developer Tools” in the Browser\nModern browsers (Chrome, Edge, Firefox) include powerful developer consoles: - Elements: Inspect and edit HTML/CSS.\n- Console: Execute JavaScript commands interactively.\n- Network: Monitor API calls and performance.\n- Sources: Debug scripts and set breakpoints.\n- Application: View storage, cookies, and local data.\nUnderstanding these tools is essential for integrating and debugging AI-powered web applications.",
    "crumbs": [
      "Ignore this - in progress work",
      "<span class='chapter-number'>17</span>  <span class='chapter-title'><yrChapterNumber>14. </yrChapterNumber> Overview of HTML, CSS, JavaScript</span>"
    ]
  },
  {
    "objectID": "099999-llmsForDataAnalytics.html",
    "href": "099999-llmsForDataAnalytics.html",
    "title": "18  15.  Using LLMs to Help With Data Analytics",
    "section": "",
    "text": "Convert unstructured data (e.g. English Text) into structured data (e.g. JSON, XML, YAML, TOML, etc)",
    "crumbs": [
      "Ignore this - in progress work",
      "<span class='chapter-number'>18</span>  <span class='chapter-title'><yrChapterNumber>15. </yrChapterNumber> Using LLMs to Help With Data Analytics</span>"
    ]
  },
  {
    "objectID": "900010-codeMetrics-v001.html",
    "href": "900010-codeMetrics-v001.html",
    "title": "19  16.  Measures of well designed programs",
    "section": "",
    "text": "The following are some metrics that can be used to see if a program is designed well:\n\nCyclomatic Complexity: Measures independent execution paths in a function. Lower is better.\nCode Coverage: % of code exercised by automated tests. Aim ≥ 80%.\nCoupling and Cohesion:\n\nCoupling: how interdependent modules are (lower is better)\nCohesion: how focused a module’s responsibilities are (higher is better)\n\nLines of Code (LOC) per Method/Class: Monitors size; excessively large methods or classes often signal poor abstraction.\nMaintainability Index: Combines LOC, complexity, and comment density into a single score.\nDefect Density: Bugs per thousand lines of code; fewer indicates higher-code quality.\nTechnical Debt Ratio: Estimated “remediation cost” vs. development cost; lower ratios are healthier.\nStatic Analysis Warnings: Number/severity of linter or analyzer alerts per 1,000 LOC.\nCode Churn: Frequency and volume of changes; high churn may signal instability or unclear design.\nDocumentation Coverage: Ratio of documented public APIs to total; measures how well the codebase is described.",
    "crumbs": [
      "Ignore this - in progress work",
      "<span class='chapter-number'>19</span>  <span class='chapter-title'><yrChapterNumber>16. </yrChapterNumber> Measures of well designed programs</span>"
    ]
  }
]